<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,IdentityRequest" name="CMH-LifecycleEvent-User-Conversion-Non-Employee" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>    
       The displayName of the identity being updated.  
       Query for this using a projection query and fall back to the name.    
</Description>
  </Variable>
  <Variable initializer="string:AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan" type="sailpoint.object.ProvisioningPlan">
    <Description>The provisioning plan which is built during the workflow.  
</Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>  
       String version of sailpoint.object.Source to indicate  
       where the request originated.  Defaults to LCM.  
</Description>
  </Variable>
  <Variable initializer="string:true" input="true" name="trace">
    <Description>  
       Used for debugging this workflow and when set to true trace  
       will be sent to stdout.  
    </Description>
  </Variable>
  <Variable name="project" type="ProvisioningProject">
    <Description>  
ProvisioningProject which is just a compiled version of the ProvisioningPlan.  
</Description>
  </Variable>
  <Variable name="identityRequestId">
    <Description>
		The Identity Request Id we get back from the request.
	</Description>
  </Variable>
  <Variable name="isDebugEnabled" type="boolean">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion-Non-Employee");
  			
  			if(log.isDebugEnabled()){
  				return true;
  			}
  			return false;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable initializer="script:new Integer(2);" name="retryTime" type="integer">
    <Description>Retry timeout.</Description>
  </Variable>
  <Variable initializer="script:new Integer(0);" name="retries" output="true" type="integer"/>
  <Variable name="employeeId">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Identity;
  			
  			String employeeId = null;
  			if(identityName != null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				if(null != iden) {
  				   employeeId = iden.getStringAttribute("employeeId");
  				}
  			}
  			return employeeId;
  		  
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="mailRequired" type="boolean">
    <Script>
      <Source><![CDATA[
  		 
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			
  			boolean emailReq = false;
			if(identityName != null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				if(null != iden) {
	  				String isEmail = iden.getStringAttribute("mailReqd");
	  				if(Util.nullSafeCaseInsensitiveEq(isEmail, "YES")) {
	  				   emailReq = true;
	  				}else {
	  				   emailReq = false;
	  				}
	  			}	
  			}  						
  		    return emailReq;
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="mail" type="String">
    <Script>
      <Source><![CDATA[
  		 
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			
  			String email = null;
			if(mailRequired){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				if(null != iden) {
  				  email = iden.getStringAttribute("email");  	
  				}			
  			}  						
  		    return email;
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="assignmentType" type="String">
    <Script>
      <Source><![CDATA[
  		 
  			import sailpoint.object.Identity;
  			
  			String assignmentType = null;
			Identity iden = context.getObjectByName(Identity.class,identityName);
  			if(null != iden) {  
  			   assignmentType = iden.getStringAttribute("assignmentType"); 
  			} 				
  			return assignmentType;
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="adAppName">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Custom;
  			
  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
  			String appName = null;
  			if(custom != null){
  				appName = custom.getString("adApplication");
  			}
  			return appName;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="newUserOU">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Custom;
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			
  			Identity identity = context.getObjectByName(Identity.class,identityName);
  			String newUserOU = null;
  			if(null != identity) {
  			    String assignmentType = identity.getStringAttribute("assignmentType");
	  			if(Util.isNotNullOrEmpty(assignmentType)) {
		  			Custom custom = context.getObjectByName(Custom.class,"CMH-User-OU-Mapping-Custom-Object");
		  			if(custom != null){
		  				newUserOU = custom.getString(assignmentType);
		  			}
		  	     }
		    }
	  		return newUserOU;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="adExists" type="boolean"/>
  <Variable name="validationErrors" type="java.util.List"/>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="CMH-AD-Generic-Rulelibrary"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="75" posY="126" wait="1">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion-Non-Employee");
  			if(isDebugEnabled){
  				log.debug("Starting the LifecycleEvent-User-Conversion-Non-Employee for the user "+identityName);
  			}
  		
  		]]></Source>
    </Script>
    <Transition to="Validate Data"/>
  </Step>
  <Step icon="Analysis" name="Validate Data" posX="206" posY="126" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[
			  
            import org.apache.log4j.Logger;
  			import sailpoint.tools.Util;
  			
  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion-Non-Employee");
  			
  			List errorList = new ArrayList();
  			if(Util.isNullOrEmpty(adAppName)) {
  			   errorList.add("The Custom Object is not configured properly with AD app name.Either Custom object or AD" +
  			   "application name in custom object is missing");
  			}
  			
  			if(Util.isNullOrEmpty(newUserOU)) {
  			    errorList.add("The Custom Object is not configured properly with AD app name.Either Custom object or AD" +
  			   "user OU in custom object is missing");
  			}
  			if(!Util.isEmpty(errorList)) {
  			  log.error("Errors Found :"+Util.listToCsv(errorList));
  			}else if(isDebugEnabled){
  				log.debug("Validation Successful");
  			}
  			return errorList;
			  
      ]]></Source>
    </Script>
    <Transition to="Check AD Application">
      <Script>
        <Source><![CDATA[
  			  
  				import sailpoint.tools.Util;
  				if(Util.isEmpty(validationErrors)){
					return true;
				}
				return false;
  			   
  			]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step icon="Default" name="Check AD Application" posX="272" posY="246">
    <Script>
      <Source><![CDATA[
			  
                import sailpoint.api.IdentityService;
                import sailpoint.object.Application;
                import sailpoint.object.Identity;
                import sailpoint.tools.GeneralException;
                
				Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion-Non-Employee");
                Identity identity = context.getObjectByName(Identity.class, identityName);
                Application app= null;  
                    try {
                       app = context.getObjectByName(Application.class, adAppName);
                    } catch (GeneralException e) {
                    log.error(e.getMessage());
                    }
                    if (null != app && null != identity) {
                      IdentityService ids = new IdentityService(context);
                      try {
                         List links = ids.getLinks(identity, app);
                         if (null != links && !links.isEmpty()) {
                            adExists = true;
                        } else {
                            adExists = false;
                        }
                      } catch (GeneralException e) {
                        log.error(e.getMessage());
                    }
                    } else {
                      log.error("Application is not found or Identity is null");
                    }
                wfcontext.getWorkflowCase().put("adExists",adExists);
			  
      ]]></Source>
    </Script>
    <Transition to="Increase Retry Count" when="return ((adExists==false) &amp;&amp; retries &lt; 3)"/>
    <Transition to="Create Plan for OU Movement" when="return (adExists==true)"/>
    <Transition to="end" when="return ((adExists==false) &amp;&amp; retries &gt;= 3)"/>
  </Step>
  <Step icon="Default" name="Increase Retry Count" posX="419" posY="355" wait="1">
    <Script>
      <Source><![CDATA[
		
			retries++;
			wfcontext.getWorkflowCase().put("retries",retries);
		
		]]></Source>
    </Script>
    <Transition to="Wait for next Retry"/>
  </Step>
  <Step icon="Default" name="Wait for next Retry" posX="272" posY="354" wait="ref:retryTime">
    <Transition to="Check AD Application"/>
  </Step>
  <Step icon="Default" name="Create Plan for OU Movement" posX="550" posY="356" resultVariable="plan">
    <Script>
      <Source><![CDATA[
			    import org.apache.log4j.Logger;
	  			import sailpoint.api.IdentityService;
	  			import sailpoint.object.Application;
	  			import sailpoint.object.Identity;
	  			import sailpoint.object.Link;
	  			import sailpoint.object.ProvisioningPlan;
	  			import sailpoint.object.ProvisioningPlan.AccountRequest;
	  			import sailpoint.object.ProvisioningPlan.AttributeRequest;
	  			import sailpoint.tools.Util;
			  	
			  	Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion-Non-Employee");
			  	
			  	 if (validationErrors == null) {
		          validationErrors = new ArrayList();
		        }
		        
                ProvisioningPlan adPlan = new ProvisioningPlan();
				List accountRequests = new ArrayList();
				Identity identity = context.getObjectByName(Identity.class, identityName);
				Application application = context.getObjectByName(Application.class, adAppName);
				if (identity != null && application != null) {
				    String homeDirectory = getHomeDirectory(identityName);
					IdentityService ids = new IdentityService(context);
					List appLink = ids.getLinks(identity, application);
					if(null != appLink) {
						for (Link adLink : appLink) {
							if (null != adLink && !adLink.isDisabled()) {
							      String accLink = adLink.getNativeIdentity();
							      String userOU = getPrimaryGrpDN(accLink);
								 if(!Util.nullSafeCaseInsensitiveEq(newUserOU,userOU)){
								    
								 	AccountRequest accModify = new AccountRequest();
								 	accModify.setApplication(adAppName);
								 	accModify.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
									accModify.setNativeIdentity(adLink.getNativeIdentity());
								 	accModify.add(new AttributeRequest("AC_NewParent",newUserOU));
								 	accModify.add(new AttributeRequest("employeeType",assignmentType));
								 	
								    //if (mailRequired && null != mail) {
									//Exchange code change employee to has email yes or no and o365 code
								    //}
								    if(Util.isNotNullOrEmpty(homeDirectory)){
								 	   accModify.add(new AttributeRequest("homeDirectory",ProvisioningPlan.Operation.Set, homeDirectory));
								 	}
								    accountRequests.add(accModify);
								 }	else {
								     validationErrors.add("Old OU and New OU cannot be same: RUN AD Aggregation");
								 }					 
							 }else {
							    validationErrors.add("AD Account link is not Active for the User");
							}
						}
					}				
					adPlan.setAccountRequests(accountRequests);
		          }
			      adPlan.setIdentity(identity);
			      if(isDebugEnabled){
	  				log.debug("Plan created to update OU and other information as per new assignmentType for the User: "+identityName);
	  			  }
  			    wfcontext.getWorkflowCase().put("validationErrors",validationErrors);
  			    return adPlan;
	
      ]]></Source>
    </Script>
    <Transition to="Compile Project">
      <Script>
        <Source><![CDATA[
  		  
  			if(plan.getAccountRequests() != null && plan.getAccountRequests().size()>0 &&  Util.isEmpty(validationErrors)){
  				return true;
  			}
  			return false;
  		   
  		]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step action="call:compileProvisioningProject" icon="Task" name="Compile Project" posX="617" posY="459" resultVariable="project">
    <Arg name="requester" value="string:spadmin"/>
    <Arg name="requireCreateTemplates" value="string:false"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="noLocking" value="true"/>
    <Arg name="noApplicationTemplates" value="string:true"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="optimisticProvisioning" value="string:false"/>
    <Arg name="plan" value="ref:plan"/>
    <Description>Compile the provisioning plan into a provisioning project.  
                 If you need to pass in provisioner options like "noFiltering"  
                 or "noRoleDeprovisioning" you must pass them as explicit  
                 arguments to the call.  
                 The evaluation options "requester" and "source" are commonly  
                 set here.               
                 You can also pass things into the Template and Field scripts by  
                 defining Args in this step.</Description>
    <Transition to="Create Identity Request"/>
  </Step>
  <Step action="call:createIdentityRequest" icon="Task" name="Create Identity Request" posX="746" posY="458">
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="priority" value="string:Normal"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="flow" value="ref:flow"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:provisionProject" icon="Provision" name="Provision" posX="891" posY="458">
    <Arg name="background" value="false"/>
    <Arg name="project" value="ref:project"/>
    <Transition to="Complete Identity Request"/>
  </Step>
  <Step action="call:completeIdentityRequest" icon="Task" name="Complete Identity Request" posX="1021" posY="458" resultVariable="identityRequest">
    <Arg name="project" value="ref:project"/>
    <Arg name="autoVerify" value="false"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Transition to="Single Account Aggregation">
      <Script>
        <Source><![CDATA[
  			  
  				import sailpoint.tools.Message;
  				if(wfcontext.getRootWorkflowCase().getMessages()== null && null == wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)) {
					return true;
				}
				return false;
  			   
  			]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step icon="Task" name="Single Account Aggregation" posX="1079" posY="308" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[
			    import org.apache.log4j.Logger;
	  			import sailpoint.api.IdentityService;
	  			import sailpoint.object.Application;
	  			import sailpoint.object.Identity;
	  			import sailpoint.object.Link;
	  			import sailpoint.tools.Util;
			  	
			  	Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion-Non-Employee");
			  	
			  	if (isDebugEnabled) {
		          log.debug("Single Account Aggregation");
		        }
	
		        if (validationErrors == null) {
		          validationErrors = new ArrayList();
		        }
		        
				List accountRequests = new ArrayList();
				Identity identity = context.getObjectByName(Identity.class, identityName);
				Application application = context.getObjectByName(Application.class, adAppName);
				if (identity != null && application != null) {
					IdentityService ids = new IdentityService(context);
					List appLink = ids.getLinks(identity, application);
					if( null != appLink ) {
					    for (Link adLink : appLink) {
					         if(null != adLink) {
					            String nativeIdentity = adLink.getNativeIdentity();
					            String cn = calculateCN(nativeIdentity);
					            if(Util.isNotNullOrEmpty(cn)){
					               String newNativeIdentity = cn+","+newUserOU;
					               validationErrors.addAll(doTargetedAggregation(newNativeIdentity,adAppName,identityName));
					            }else {
					              validationErrors.add("CN Value is NULL");
					            }
					         }
					     }         
					}
				 }
			    if(isDebugEnabled){
	  				log.debug("Exiting Single Account Aggregation");
	  			 }
  			 return validationErrors;
      ]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step catches="complete" icon="Catches" name="Check Status" posX="74" posY="31">
    <Arg name="attributeName" value="string:Employee ID"/>
    <Arg name="source" value="string:CMH-LifecycleEvent-User-Conversion-Non-Employee"/>
    <Arg name="attributeValue" value="ref:employeeId"/>
    <Arg name="target" value="ref:identityName"/>
    <Script>
      <Source><![CDATA[
  		
			  
	      	import sailpoint.tools.Message;
			import sailpoint.tools.Util;
			import org.apache.log4j.Logger;
			
			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion-Non-Employee");
			if(validationErrors==null){
				validationErrors = new ArrayList();
			}
			if(adExists == false){
			   validationErrors.add("AD Link does exists");
			}
			if(wfcontext.getRootWorkflowCase().getMessages() != null && null != wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)){
				log.error("Error occured in leaver process: "+wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error));
				List errorMessagesList = wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error);
				String errorMessagesFromWfc = Util.listToCsv(errorMessagesList);
				validationErrors.add(errorMessagesFromWfc);
			}
			if(isDebugEnabled){
				log.debug("CMH-LifecycleEvent-User-Conversion-Non-Employee : Errors recorded in Leaver process: "+validationErrors.toString());
			}
			if(Util.isEmpty(validationErrors) && adExists == true){
			    Map map = new HashMap();
			    map.put("setString1","User-Conversion-Non-Employee is successfully completed" );
  				auditWrite("User-Conversion-Non-Employee Success",source,target,attributeName,attributeValue,map);
				
  			}else{
  			    Map map = new HashMap();
  			    map.put("setString1","User Conversion Non Employee Process failed due to errors");
  				map.put("setString2",Util.listToCsv(validationErrors));
		  		auditWrite("User-Conversion-Non-Employee Failure",source,target,attributeName,attributeValue,map);
  			}
  			
  			
  			if(isDebugEnabled){
  			    log.debug("Check Status step : Audit Event Generated");
  			    log.debug("Ending the LifecycleEvent-User-Conversion-Non-Employee for the user "+identityName);
  			}
 
		]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="884" posY="242"/>
</Workflow>
