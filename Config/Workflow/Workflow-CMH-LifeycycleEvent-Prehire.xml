<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,IdentityRequest" name="CMH-LifeycycleEvent-Prehire" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>    
       The displayName of the identity being updated.  
       Query for this using a projection query and fall back to the name.    
	</Description>
  </Variable>
  <Variable initializer="string:AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan" type="sailpoint.object.ProvisioningPlan">
    <Description>The provisioning plan which is built during the workflow.  
	</Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>  
       String version of sailpoint.object.Source to indicate  
       where the request originated.  Defaults to LCM.  
	</Description>
  </Variable>
  <Variable initializer="string:true" input="true" name="trace">
    <Description>  
       Used for debugging this workflow and when set to true trace  
       will be sent to stdout.  
    </Description>
  </Variable>
  <Variable name="project" type="ProvisioningProject">
    <Description>  
		ProvisioningProject which is just a compiled version of the ProvisioningPlan.  
	</Description>
  </Variable>
  <Variable name="identityRequestId">
	<Description>
		The Identity Request Id we get back from the request.
	</Description>
  </Variable>
  <Variable name="isDebugEnabled" type="boolean">
  	<Script>
  		<Source>
  		<![CDATA[
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("CMH_LifecycleEvent_Prehire");
  			
  			if(log.isDebugEnabled()){
  				return true;
  			}
  			return false;
  		]]>
  		</Source>
  	</Script>
  </Variable>
  <Variable name="employeeId">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.object.Identity;
  			
  			String employeeId = null;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				employeeId = iden.getStringAttribute("employeeId");
  			}
  			return employeeId;
  		]]>
  		</Source>
  	</Script>
  </Variable>
  <Variable name="assignmentType">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.object.Identity;
  			
  			String assignmentType = null;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				assignmentType = iden.getStringAttribute("assignmentType");
  			}
  			return assignmentType;
  		]]>
  		</Source>
  	</Script>
  </Variable>
  <Variable name="emailRequired">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.object.Identity;
  			
  			String emailRequired = null;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				emailRequired = iden.getStringAttribute("mailReqd");
  			}
  			return emailRequired;
  		]]>
  		</Source>
  	</Script>
  </Variable>
    <Variable name="toAddress">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.object.Identity;
  			import org.apache.commons.lang.StringUtils;
  			
  			String toAddress = "admin@cmh.edu";
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				if(iden!=null && iden.getManager()!=null){
  					String managerMail = iden.getManager().getEmail();
  					if(!StringUtils.isBlank(managerMail)){
  						toAddress = managerMail;
  					}
  				}
  			}
  			return toAddress;
  		]]>
  		</Source>
  	</Script>
  </Variable>
  <Variable name="adAppName">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.object.Custom;
  			
  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
  			String appName = null;
  			if(custom!=null){
  				appName = custom.getString("applicationName");
  			}
  			return appName;
  		]]>
  		</Source>
  	</Script>
  </Variable>
  <Variable name="adExists" type="boolean">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.api.IdentityService;
  			import sailpoint.object.Application;
  			import sailpoint.object.Identity;
  			
  			Identity iden = context.getObjectByName(Identity.class,identityName);
  			Application app = context.getObjectByName(Application.class,adAppName);
  			List appList = null;
  			if(iden!=null && app!=null){
  				IdentityService iser = new IdentityService(context);
  				appList = iser.getLinks(iden,app);
  				if(appList!=null && appList.size()>0){
  					return true;
  				}
  			}
  			return false;
  		]]>
  		</Source>
  	</Script>
  </Variable>
  <Variable name="o365Licenses" type="java.util.List">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.object.Custom;
  			
  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
  			List license = new ArrayList();
  			if(custom!=null){
  				license = custom.getList("O365License");
  			}
  			return license;
  		]]>
  		</Source>
  	</Script>
  </Variable>
  <Variable name="managerName">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.object.Identity;
  			
  			String managerName=null;
			Identity iden = context.getObjectByName(Identity.class,identityName);
			if(iden!=null && iden.getManager()!=null){
				managerName = iden.getManager().getFirstname()+" "+iden.getManager().getLastname();
			}
			return managerName;
  		]]>
  		</Source>
  	</Script>
  </Variable>
  <Variable name="validationErrors" type="java.util.List"/>
  <Description>  
      Enable the AD and Exchange accounts provisioned as part of birthright access for the Pre-hired users 
  </Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="CMH-AD-Generic-Rulelibrary"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="28" posY="10" wait="1">
  	<Script>
  		<Source>
  		<![CDATA[
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("CMH_LifecycleEvent_Prehire");
  			if(isDebugEnabled){
  				log.debug("Starting the Prehire Workflow for the user "+identityName+" with the employee ID : "+employeeId);
  			}
  		]]>
  		</Source>
  	</Script>
    <Transition to="Validate Data"/>
  </Step>
  <Step icon="Task" name="Validate Data" resultVariable="validationErrors">
  	<Script>
  		<Source>
  		<![CDATA[
  			import org.apache.log4j.Logger;
  			import sailpoint.tools.Util;
  			
  			Logger log = Logger.getLogger("CMH_LifecycleEvent_Prehire");
  			
  			List errorList = new ArrayList();
  			if(Util.isNullOrEmpty(adAppName)){
  				errorList.add("The Custom Object is not configured properly with AD app name. Either Custom object or AD application name in custom object is missing");
  			}
  			
  			if(Util.isEmpty(o365Licenses)){
  				errorList.add("The Custom Object is not configured properly with O365 License. Either Custom object or License entry in custom object is missing");
  			}
  			
  			if(!adExists){
  				errorList.add("The AD account for the user is not created through the Role based Birthright provisioning process");
  			}
  			
  			if(!Util.isEmpty(errorList))
  			{
  				log.error("CMH-LifeycycleEvent-Prehire: Errors Found :"+Util.listToCsv(errorList));
  			}else if(isDebugEnabled){
  				log.debug("CMH-LifeycycleEvent-Prehire: Validation Successful");
  			}
  			
  			return errorList;
  		]]>
  		</Source>
  	</Script>
  	<Transition to="Enable Identity">
  		<Script>
  			<Source>
  			<![CDATA[
  				import sailpoint.tools.Util;
  				if(Util.isEmpty(validationErrors)){
					return true;
				}
				return false;
  			]]>
  			</Source>
  		</Script>
  	</Transition>
  	<Transition to="Stop"/>
  </Step>
  <Step icon="Task" name="Enable Identity">
  	<Script>
  		<Source>
  		<![CDATA[
  			import org.apache.log4j.Logger;
  			import sailpoint.object.Identity;
  			
  			Logger log = Logger.getLogger("CMH_LifecycleEvent_Prehire");
  			
  			Identity iden = context.getObjectByName(Identity.class,identityName);
  			if(iden!=null){
  				iden.setInactive(false);
  				iden.setAttribute("status","ACTIVE");
  				context.saveObject(iden);
  				context.commitTransaction();
  				
  				if(isDebugEnabled){
  					log.debug("CMH-LifeycycleEvent-Prehire: Identity "+identityName+" enabled succesfully");
  				}
  			}
  		]]>
  		</Source>
  	</Script>
  	<Transition to="Enable AD account"/>
  </Step>
  <Step icon="Task" name="Enable AD account" resultVariable="plan">
  <Script>
  	<Source>
  		<![CDATA[
  			import org.apache.log4j.Logger;
  			import sailpoint.api.IdentityService;
  			import sailpoint.object.Application;
  			import sailpoint.object.Identity;
  			import sailpoint.object.Link;
  			import sailpoint.object.ProvisioningPlan;
  			import sailpoint.object.ProvisioningPlan.AccountRequest;
  			import sailpoint.object.ProvisioningPlan.AttributeRequest;
  			import sailpoint.tools.Util;
  			
  			Logger log = Logger.getLogger("CMH_LifecycleEvent_Prehire");
  			
  			if(isDebugEnabled){
  				log.debug("CMH_LifecycleEvent_Prehire: Building Provisioning Plan for enabling the AD account of User: "+identityName);
  			}
  			
  			ProvisioningPlan adPlan = new ProvisioningPlan();
  			List accountRequests = new ArrayList();
  			Identity iden = context.getObjectByName(Identity.class,identityName);
  			Application app = context.getObjectByName(Application.class,adAppName);
  			if(iden!=null && app!=null){
  				IdentityService iser = new IdentityService(context);
  				List adLinks = iser.getLinks(iden,app);
  				for(Link adLink:adLinks){
  					if(adLink!=null){
  						AccountRequest acctReq = new AccountRequest();
  						acctReq.setApplication(adAppName);
  						acctReq.setOperation(ProvisioningPlan.AccountRequest.Operation.Enable);
  						acctReq.setNativeIdentity(adLink.getNativeIdentity());
  						accountRequests.add(acctReq);
  						
  						AccountRequest acctReqGrp = new AccountRequest();
  						acctReqGrp.setApplication(adAppName);
  						acctReqGrp.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
  						acctReqGrp.setNativeIdentity(adLink.getNativeIdentity());
  						acctReqGrp.add(new AttributeRequest("IIQDisabled",ProvisioningPlan.Operation.Set,false));
  						if(Util.isNotNullOrEmpty(assignmentType)){
  							if(Util.nullSafeCaseInsensitiveEq(assignmentType,"EMPLOYEE")){
  								//acctReqGrp.add(new AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,o365Licenses));
  							}else if(Util.nullSafeCaseInsensitiveEq(emailRequired,"Yes")){
  								//acctReqGrp.add(new AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,o365Licenses));
  							}
  						}
  						accountRequests.add(acctReqGrp);
  					}
  				}
  				adPlan.setAccountRequests(accountRequests);
  			}
  			adPlan.setIdentity(iden);
  			
  			if(isDebugEnabled){
  				log.debug("CMH_LifecycleEvent_Prehire: Plan created for the user successfully: "+adPlan.toXml());
  			}
  			
  			return adPlan;
  		]]>
  	</Source>
  </Script>
  <Transition to="Compile Project">
  	<Script>
  		<Source>
  		<![CDATA[
  			if(plan.getAccountRequests()!=null && plan.getAccountRequests().size()>0){
  				return true;
  			}
  			return false;
  		]]>
  		</Source>
  	</Script>
  </Transition>
  <Transition to="Stop"/>
  </Step>
  <Step action="call:compileProvisioningProject" icon="Task" name="Compile Project" posX="406" posY="10" resultVariable="project">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="requester" value="string:spadmin"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="optimisticProvisioning" value="string:false"/>
    <Arg name="requireCreateTemplates" value="string:false"/>
    <Arg name="noLocking" value="true"/>
    <Arg name="noApplicationTemplates" value="string:true"/>
    <Description>Compile the provisioning plan into a provisioning project.  
                 If you need to pass in provisioner options like "noFiltering"  
                 or "noRoleDeprovisioning" you must pass them as explicit  
                 arguments to the call.  
                 The evaluation options "requester" and "source" are commonly  
                 set here.               
                 You can also pass things into the Template and Field scripts by  
                 defining Args in this step.</Description>
    <Transition to="Create Identity Request"/>
  </Step>
  <Step action="call:createIdentityRequest" icon="Task" name="Create Identity Request" posX="841" posY="239">
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="priority" value="string:Normal"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="flow" value="ref:flow"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:provisionProject" icon="Provision" name="Provision" posX="682" posY="10">
    <Arg name="background" value="false"/>
    <Arg name="project" value="ref:project"/>
    <Transition to="Complete Identity Request"/>
  </Step>
  <Step action="call:completeIdentityRequest" icon="Task" name="Complete Identity Request" posX="953" posY="94" resultVariable="identityRequest">
	<Arg name="project" value="ref:project"/>
	<Arg name="autoVerify" value="false"/>
	<Arg name="identityRequestId" value="ref:identityRequestId"/>
	<Transition to="Refresh Identity"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Refresh Identity">
  	<Arg name="identityName" value="ref:identityName"/>
  	<Arg name="correlateEntitlements" value="true"/>
  	<Arg name="provision" value="true"/>
  	<Arg name="promoteAttributes" value="true"/>
  	<Arg name="refreshRoleMetadata" value="true"/>
  	<Arg name="refreshScorecard" value="true"/>
  	<Arg name="synchronizeAttributes" value="true"/>
  	<Transition to="Stop"/>
  </Step>
  <Step icon="Task" catches="complete" name="Check Status">
  	<Script>
  		<Source>
  		<![CDATA[
  			import java.text.SimpleDateFormat;
  			import org.apache.log4j.Logger;
  			import sailpoint.object.AuditEvent;
  			import sailpoint.object.EmailTemplate;
  			import sailpoint.object.EmailOptions;
			import sailpoint.server.Auditor;
			import sailpoint.tools.EmailException;
  			import sailpoint.tools.Message;
  			import sailpoint.tools.Util;
  			
  			Logger log = Logger.getLogger("CMH_LifecycleEvent_Prehire");
  			
  			if(isDebugEnabled){
  				log.debug("CMH_LifecycleEvent_Prehire: Check Status step : Checking for errors");
  			}
  			
  			if(wfcontext.getRootWorkflowCase().getMessages()!=null && wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)!=null){
  				List errorMessagesList = wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error);
  				String errorMessage = Util.listToCsv(errorMessagesList);
  				if(validationErrors==null){
  					validationErrors = new ArrayList();
  				}
  				validationErrors.add(errorMessage);
  				
  				if(isDebugEnabled){
	  				log.debug("CMH_LifecycleEvent_Prehire: Check Status step : Errors Found : "+Util.listToCsv(validationErrors));
	  			}
  			}
  			  			
  			String action = "Prehire";
  			String target = identityName;
  			String attrName = "Employee ID";
  			String attrVal = employeeId;
  			Map strMap = new HashMap();
  			if(Util.isEmpty(validationErrors)){
  				strMap.put("setString1","Prehire Completed succesfully");
  				strMap.put("setString2","AD account enabled successfully");
  			}else{
  				strMap.put("setString1","Prehire failed due to errors");
  				strMap.put("setString2",Util.listToCsv(validationErrors));
  			}
  			auditWrite(action,source,target,attrName,attrVal,strMap);
  			
  			if(isDebugEnabled){
  				log.debug("CMH_LifecycleEvent_Prehire: Check Status step : Audit Event Generated");
  			}
  			  			
  			
  			EmailTemplate template = null;
  			EmailOptions options = new EmailOptions();
  			if(Util.isEmpty(validationErrors)){
  				template = context.getObjectByName(EmailTemplate.class,"New Account Creation");
  				options.setSendImmediate(true);
	  			options.setVariable("userName",identityName);
				options.setVariable("userType",assignmentType);
				options.setVariable("employeeId",employeeId);
				options.setVariable("identityName",identityName);
				options.setVariable("managername",managerName);
  				options.setTo(toAddress);
  			}
  			if(template!=null){
  				try{
  					context.sendEmailNotification(template,options);
  				}catch(EmailException e){
  					log.error("CMH_LifecycleEvent_Prehire: Error in Sending email : "+e.getMessage());
  				}
  			}  		
  		]]>
  		</Source>
  	</Script>
  	<Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="784" posY="10"/>
</Workflow>
