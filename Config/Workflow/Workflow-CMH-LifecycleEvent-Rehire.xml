<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,IdentityRequest" name="CMH-LifecycleEvent-Rehire" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>    
       The displayName of the identity being updated.  
       Query for this using a projection query and fall back to the name.    
</Description>
  </Variable>
  <Variable initializer="string:AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan" type="sailpoint.object.ProvisioningPlan">
    <Description>The provisioning plan which is built during the workflow.  
</Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>  
       String version of sailpoint.object.Source to indicate  
       where the request originated.  Defaults to LCM.  
</Description>
  </Variable>
  <Variable initializer="string:true" input="true" name="trace">
    <Description>  
       Used for debugging this workflow and when set to true trace  
       will be sent to stdout.  
    </Description>
  </Variable>
  <Variable name="project" type="ProvisioningProject">
    <Description>  
ProvisioningProject which is just a compiled version of the ProvisioningPlan.  
</Description>
  </Variable>
  <Variable name="identityRequestId">
    <Description>
		The Identity Request Id we get back from the request.
	</Description>
  </Variable>
  <Variable name="isDebugEnabled" type="boolean">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-Rehire");
  			
  			if(log.isDebugEnabled()){
  				return true;
  			}
  			return false;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="employeeId">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Identity;
  			
  			String employeeId = null;
  			if(identityName!=null){
  			   Identity iden = context.getObjectByName(Identity.class,identityName);
  			   if(null != iden) {
	  			  employeeId = iden.getStringAttribute("employeeId");
	  			}
  			}
  			return employeeId;
  		  
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="status">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Identity;
  			
  			String status = null;
  			if(identityName!=null){
  			   Identity iden = context.getObjectByName(Identity.class,identityName);
  			   if(null != iden) {
  				  status = iden.getStringAttribute("status");
  			   }  
  			}
  			return status;
  		  
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="assignmentType">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			
  			String assignmentType = null;
  			if(identityName!=null){
  			  Identity iden = context.getObjectByName(Identity.class,identityName);
  			   if(null != iden) {  
  				  assignmentType = iden.getStringAttribute("assignmentType");
  			   }
  			}
  			if(Util.isNotNullOrEmpty(assignmentType)) {
               return assignmentType;
            }else {
               return null;
  			}
 
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="hasEmail" type="boolean">
    <Script>
      <Source><![CDATA[
  		 
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			String email = null;
  			boolean hasEmail = false;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				if(null != iden) {
	  				email= iden.getStringAttribute("email");
	  				if(Util.isNotNullOrEmpty(email)) {
	  				   hasEmail =true;
	  				}
	  			}
  			}  						
  		   return hasEmail;
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="adAppName">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Custom;
  			
  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
  			String appName = null;
  			if(custom!=null){
  				appName = custom.getString("adApplication");
  			}
  			return appName;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="enabledUserOU">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			
  			String assignmentType = null;
  			String enabledUserOU = null;
  			if(identityName != null){
  			  Identity iden = context.getObjectByName(Identity.class,identityName);
  			  if(null != iden) {  
  				  assignmentType = iden.getStringAttribute("assignmentType");
  				}
  			}
  			if(Util.isNotNullOrEmpty(assignmentType)) {
                enabledUserOU = getCustomObject(assignmentType,"CMH-User-OU-Mapping-Custom-Object" );
  			    if(Util.isNotNullOrEmpty(enabledUserOU)){
  				   return enabledUserOU;
  			     }
  		     }
  			
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="adExists" type="boolean"/>
  <Variable initializer="script:new Integer(0);" name="retries" output="true" type="integer"/>
  <Variable initializer="Integer" name="maxRetry" output="true"/>
  <Variable name="deletionStatus">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Identity;
  			
  			String deletionStatus = null;
  			if(identityName != null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				if(null != iden) {  
  				   deletionStatus = iden.getStringAttribute("deletionStatus");
  				}
  			}
  			return deletionStatus;
  		  
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="checkStatusFlag" type="boolean"/>
  <Variable name="toAddress">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			
  			String toAddress = null;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				if(iden != null && iden.getManager() != null){
  					String managerMail = iden.getManager().getEmail();
  					if(Util.isNotNullOrEmpty(managerMail)){
  						toAddress = managerMail;
  					}
  				}
  			}
  			return toAddress;
  		 
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="managerName">
    <Description>Manager Name</Description>
    <Script>
      <Source><![CDATA[
		
        import sailpoint.object.Identity;
        Identity identityObject = context.getObject(Identity.class,identityName);
        if(identityObject != null){
          Identity managerIdentity = identityObject.getManager();
          if(managerIdentity!=null){
            return managerIdentity.getName();
          }
        }
        return null;
		
		]]></Source>
    </Script>
  </Variable>
  <Variable initializer="New Account Creation" input="true" name="managerEmailTemplate"/>
  <Variable name="validationErrors" type="java.util.List"/>
  <Variable name="connectedApps" type="java.util.List"/>
  <Variable name="snowTicketId"/>
  <Variable name="password">
    <Description>user password</Description>
    <Script>
      <Source><![CDATA[
        
		      import sailpoint.object.Identity;
		      import sailpoint.tools.Util;
              Identity identity = context.getObject(Identity.class,identityName);
              String passWord = null;
              if( null !=identity) {
                 String firstName = identity.getStringAttribute("firstname");
                 String lastName = identity.getStringAttribute("lastname");
	             String dob = identity.getStringAttribute("birthMonthDay");
	             String employeeId = identity.getStringAttribute("employeeId");
	             char[] userPass = generateUserPassword(firstName,lastName,dob,employeeId);
                 if(null != userPass){
                    passWord = (String) new String(userPass);             
                 }
              }
			  return passWord;
		]]></Source>
    </Script>
  </Variable>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="CMH-AD-Generic-Rulelibrary"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="101" posY="128" wait="1">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-Rehire");
  			if(isDebugEnabled){
  				log.debug("Starting the CMH-LifecycleEvent-Rehire for the user "+identityName);
  			}
  		
  		]]></Source>
    </Script>
    <Transition to="Validate Data"/>
  </Step>
  <Step icon="Analysis" name="Validate Data" posX="224" posY="126" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[
			  
            import org.apache.log4j.Logger;
  			import sailpoint.tools.Util;
  			
  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-Rehire");
  			
  			List errorList = new ArrayList();
  			if(Util.isNullOrEmpty(adAppName)) {
  			   errorList.add("The Custom Object is not configured properly with AD app name.Either Custom object or AD" +
  			   "application name in custom object is missing");
  			}
  			if(Util.isNullOrEmpty(toAddress)) {
  			   errorList.add("Manager does not have email");
  			}
  			if(Util.isNullOrEmpty(enabledUserOU)) {
  			    errorList.add("The Custom Object is not configured properly with AD app name.Either Custom object or AD" +
  			   "user OU in custom object is missing");
  			}
  			if(!Util.isEmpty(errorList)) {
  			  log.error("Errors Found :"+Util.listToCsv(errorList));
  			}else if(isDebugEnabled){
  				log.debug("Validation Successful");
  			}
  			return errorList;
			  
      ]]></Source>
    </Script>
    <Transition to="Get Connected Apps">
      <Script>
        <Source><![CDATA[
  			  
  				import sailpoint.tools.Util;
  				if(Util.isEmpty(validationErrors)){
					return true;
				}
				return false;
  			   
  			]]></Source>
      </Script>
    </Transition>
    <Transition to="Add Error Message"/>
  </Step>
  <Step icon="Task" name="Get Connected Apps" posX="290" posY="246" resultVariable="connectedApps">
    <Script>
      <Source><![CDATA[
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-Rehire");
  			List connectedApps = getAppsToProcess(identityName,"CMH-Leaver-Custom-Object","connectedApplications");
  			if(connectedApps==null || connectedApps.size()<=0){
  				log.info("There are no connected Apps associated with the user");
  			}
  			else if(isDebugEnabled){
  				log.debug("List of Connected Apps to be deleted: "+connectedApps.toString());
  			}
  			return connectedApps;
  		]]></Source>
    </Script>
    <Transition to="Check AD Application"/>
  </Step>
  <Step icon="Task" name="Check AD Application" posX="552" posY="245">
    <Script>
      <Source><![CDATA[
			  
                import sailpoint.api.IdentityService;
                import sailpoint.object.Application;
                import sailpoint.object.Identity;
                import sailpoint.tools.GeneralException;
                
				Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-Rehire");
                Identity identity = context.getObjectByName(Identity.class, identityName);
                Application app= null;  
                    try {
                       app = context.getObjectByName(Application.class, adAppName);
                    } catch (GeneralException e) {
                    log.error(e.getMessage());
                    }
                    if (null != app && null != identity) {
                      IdentityService ids = new IdentityService(context);
                      try {
                         List links = ids.getLinks(identity, app);
                         if (null != links && !links.isEmpty()) {
                            adExists = true;
                        } else {
                            adExists = false;
                        }
                      } catch (GeneralException e) {
                        log.error(e.getMessage());
                    }
                    } else {
                      log.error("Application is not found or Identity is null");
                    }
                wfcontext.getWorkflowCase().put("adExists",adExists);
			  
      ]]></Source>
    </Script>
    <Transition to="Increase Retry Count" when="return ((adExists==false) &amp;&amp; retries &lt; 3)"/>
    <Transition to="Enable User" when="return (adExists==true)"/>
    <Transition to="end" when="return ((adExists==false) &amp;&amp; retries &gt;= 3)"/>
  </Step>
  <Step icon="Default" name="Increase Retry Count" posX="698" posY="352" wait="1">
    <Script>
      <Source><![CDATA[
		
			retries++;
			wfcontext.getWorkflowCase().put("retries",retries);
		
		]]></Source>
    </Script>
    <Transition to="Wait for next Retry"/>
  </Step>
  <Step icon="Undo" name="Wait for next Retry" posX="552" posY="353" wait="ref:retryTime">
    <Transition to="Check AD Application"/>
  </Step>
  <Step icon="Default" name="Enable User" posX="818" posY="359">
    <Script>
      <Source><![CDATA[
			  
               import org.apache.log4j.Logger;
               import sailpoint.api.ObjectUtil;
  			   import sailpoint.object.Identity;
  			   import sailpoint.tools.Util;
  			   Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-Rehire");
               
               Identity identity = acquireLockOnIdentity(identityName);
               if( null !=identity) {
                    
                    if(Util.nullSafeCaseInsensitiveEq("Active",status)) {
                       identity.setInactive(false);
                     }if(Util.nullSafeCaseInsensitiveEq("Prehire",status)) {
                       identity.setInactive(true);
                     }
                    identity.setAttribute("deletionDate",null);
	  				identity.setAttribute("deletionStatus",null);
	  				context.saveObject(identity);
	  				context.commitTransaction();
               }
               ObjectUtil.unlockIdentity(context,identity);
               if(isDebugEnabled){
  					log.debug("Identity "+identityName+" enabled succesfully");
  				}
  			   			 
      ]]></Source>
    </Script>
    <Transition to="Process Provisioning For PREHIRE">
      <Script>
        <Source><![CDATA[
           
  		        import sailpoint.tools.Util;
  				if(Util.isEmpty(validationErrors) && Util.nullSafeCaseInsensitiveEq(status,"PREHIRE")){
					return true;
				}
				return false;
  			  
  	     ]]></Source>
      </Script>
    </Transition>
    <Transition to="Process Provisioning For ACTIVE">
      <Script>
        <Source><![CDATA[
           
  		        import sailpoint.tools.Util;
  				if(Util.isEmpty(validationErrors) && Util.nullSafeCaseInsensitiveEq(status,"ACTIVE")){
					return true;
				}
				return false;
  			  
  	     ]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step icon="Task" name="Process Provisioning For PREHIRE" posX="884" posY="449" resultVariable="plan">
    <Script>
      <Source><![CDATA[
			    import org.apache.log4j.Logger;
	  			import sailpoint.api.IdentityService;
	  			import sailpoint.object.Application;
	  			import sailpoint.object.Identity;
	  			import sailpoint.object.Link;
	  			import sailpoint.object.Attributes;
	  			import sailpoint.object.ProvisioningPlan;
	  			import sailpoint.object.ProvisioningPlan.AccountRequest;
	  			import sailpoint.object.ProvisioningPlan.AttributeRequest;
	  			import sailpoint.tools.Util;
			  	
			  	Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-Rehire");
			  	
			  	 if (validationErrors == null) {
		          validationErrors = new ArrayList();
		        }
                ProvisioningPlan adPlan = new ProvisioningPlan();
				List accountRequests = new ArrayList();
				Identity identity = context.getObjectByName(Identity.class, identityName);
				Application application = context.getObjectByName(Application.class, adAppName);
				if (identity != null && application != null) {
					IdentityService ids = new IdentityService(context);
					List appLink = ids.getLinks(identity, application);
					if(null != appLink) {
						for (Link adLink : appLink) {
							if (null != adLink && adLink.isDisabled()) {
							      String accLink = adLink.getNativeIdentity();
							      String userOU = getPrimaryGrpDN(accLink);
								 if(!Util.nullSafeCaseInsensitiveEq(enabledUserOU,userOU)){
								 	AccountRequest accModify = new AccountRequest();
								 	accModify.setApplication(adAppName);
								 	accModify.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
									accModify.setNativeIdentity(adLink.getNativeIdentity());
								 	accModify.add(new AttributeRequest("AC_NewParent",enabledUserOU));
								 	accModify.add(new AttributeRequest("pwdLastSet",true));
								 	accModify.add(new AttributeRequest("employeeType",assignmentType));
								 	Attributes attr = new Attributes();
								 	attr.put("secret", true);
								 	AttributeRequest pwdAttrReq = new AttributeRequest();
								 	pwdAttrReq.setArgs(attr);
					                pwdAttrReq.setName("password");
					                pwdAttrReq.setOperation(ProvisioningPlan.Operation.Set);
					                pwdAttrReq.setValue(password);
								 	accModify.add(pwdAttrReq);
								 	if (Util.nullSafeCaseInsensitiveEq(assignmentType, "EMPLOYEE")) {
									//Exchange code change employee to has email yes or no and o365 code
								    }
								    accountRequests.add(accModify);
								 }else {
								     validationErrors.add("Old OU and New OU cannot be: RUN AD Aggregation");
								 }					 
							}
						 }	
					  }				
					adPlan.setAccountRequests(accountRequests);
		          }
			      adPlan.setIdentity(identity);
			      if(isDebugEnabled){
	  				log.debug("Plan created successfully with Prehire status for the Rehire User : "+identityName);
	  			  }
  			    wfcontext.getWorkflowCase().put("validationErrors",validationErrors);
  			    return adPlan;	
	
      ]]></Source>
    </Script>
    <Transition to="Compile Project">
      <Script>
        <Source><![CDATA[
  		  
  		    import sailpoint.tools.Util;
  			if(plan.getAccountRequests()!=null && plan.getAccountRequests().size()>0 && Util.isEmpty(validationErrors)){
  				return true;
  			}
  			return false;
  		   
  		]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step icon="Task" name="Process Provisioning For ACTIVE" posX="878" posY="268" resultVariable="plan">
    <Script>
      <Source><![CDATA[
        
                import org.apache.log4j.Logger;
	  			import sailpoint.api.IdentityService;
	  			import sailpoint.object.Application;
	  			import sailpoint.object.Identity;
	  			import sailpoint.object.Link;
	  			import sailpoint.object.Attributes;
	  			import sailpoint.object.ProvisioningPlan;
	  			import sailpoint.object.ProvisioningPlan.AccountRequest;
	  			import sailpoint.object.ProvisioningPlan.AttributeRequest;
	  			import sailpoint.tools.Util;
			  	
			  	Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-Rehire");
			  	
			  	 if (validationErrors == null) {
		          validationErrors = new ArrayList();
		        }
                ProvisioningPlan adPlan = new ProvisioningPlan();
				List accountRequests = new ArrayList();
				Identity identity = context.getObjectByName(Identity.class, identityName);
				Application application = context.getObjectByName(Application.class, adAppName);
				if (identity != null && application != null) {
					IdentityService ids = new IdentityService(context);
					List appLink = ids.getLinks(identity, application);
					if(null != appLink) {
						for (Link adLink : appLink) {
							if (null != adLink && adLink.isDisabled()) {
							      String accLink = adLink.getNativeIdentity();
							      String userOU = getPrimaryGrpDN(accLink);
								 if(!Util.nullSafeCaseInsensitiveEq(enabledUserOU,userOU)){
								    AccountRequest accrq = new AccountRequest();
								    accrq.setApplication(adAppName);
								    accrq.setOperation(ProvisioningPlan.AccountRequest.Operation.Enable);
								    accrq.setNativeIdentity(adLink.getNativeIdentity());
								    accountRequests.add(accrq);
								    
								 	AccountRequest accModify = new AccountRequest();
								 	accModify.setApplication(adAppName);
								 	accModify.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
									accModify.setNativeIdentity(adLink.getNativeIdentity());
								 	accModify.add(new AttributeRequest("AC_NewParent",enabledUserOU));
								 	accModify.add(new AttributeRequest("employeeType",assignmentType));
								 	accModify.add(new AttributeRequest("pwdLastSet", true));
								 	
								 	Attributes attr = new Attributes();
								 	attr.put("secret", true);
								 	AttributeRequest pwdAttrReq = new AttributeRequest();
								 	pwdAttrReq.setArgs(attr);
					                pwdAttrReq.setName("password");
					                pwdAttrReq.setOperation(ProvisioningPlan.Operation.Set);
					                pwdAttrReq.setValue(password);
					                accModify.add(pwdAttrReq);
								 
								 	if (Util.nullSafeCaseInsensitiveEq(assignmentType, "EMPLOYEE")) {
									//Exchange code change employee to has email yes or no and o365 code
								    }
								    accountRequests.add(accModify);
								 }	else {
								     validationErrors.add("Old OU and New OU cannot be: RUN AD Aggregation");
								 }					 
							}
						 }
					  }					
					adPlan.setAccountRequests(accountRequests);
		          }
			      adPlan.setIdentity(identity);
			      if(isDebugEnabled){
	  				log.debug("Plan created successfully with Active status for the Rehire User  "+identityName);
	  			  }
  			    wfcontext.getWorkflowCase().put("validationErrors",validationErrors);
  			    return adPlan;
  		]]></Source>
    </Script>
    <Transition to="Compile Project">
      <Script>
        <Source><![CDATA[
  		  
  		    import sailpoint.tools.Util;
  			if(plan.getAccountRequests()!=null && plan.getAccountRequests().size()>0 && Util.isEmpty(validationErrors)){
  				return true;
  			}
  			return false;
  		   
  		]]></Source>
      </Script>
    </Transition>
    <Transition to="Notify Manager">
      <Script>
        <Source><![CDATA[
  		  
  		    import sailpoint.tools.Util;
  			if(plan.getAccountRequests()== null && Util.isEmpty(validationErrors)){
  				return true;
  			}
  			return false;  		   
  		]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step action="call:compileProvisioningProject" icon="Task" name="Compile Project" posX="1012" posY="553" resultVariable="project">
    <Arg name="requester" value="string:spadmin"/>
    <Arg name="requireCreateTemplates" value="string:false"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="noLocking" value="true"/>
    <Arg name="noApplicationTemplates" value="string:true"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="optimisticProvisioning" value="string:false"/>
    <Arg name="plan" value="ref:plan"/>
    <Description>Compile the provisioning plan into a provisioning project.  
                 If you need to pass in provisioner options like "noFiltering"  
                 or "noRoleDeprovisioning" you must pass them as explicit  
                 arguments to the call.  
                 The evaluation options "requester" and "source" are commonly  
                 set here.               
                 You can also pass things into the Template and Field scripts by  
                 defining Args in this step.</Description>
    <Transition to="Create Identity Request"/>
  </Step>
  <Step action="call:createIdentityRequest" icon="Task" name="Create Identity Request" posX="1163" posY="553">
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="priority" value="string:Normal"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="flow" value="ref:flow"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:provisionProject" icon="Provision" name="Provision" posX="1295" posY="552">
    <Arg name="background" value="false"/>
    <Arg name="project" value="ref:project"/>
    <Transition to="Complete Identity Request"/>
  </Step>
  <Step action="call:completeIdentityRequest" icon="Task" name="Complete Identity Request" posX="1435" posY="551" resultVariable="identityRequest">
    <Arg name="project" value="ref:project"/>
    <Arg name="autoVerify" value="false"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Transition to="Single Account Aggregation">
      <Script>
        <Source><![CDATA[
  			  
  				import sailpoint.tools.Message;
  				if(wfcontext.getRootWorkflowCase().getMessages()== null && null == wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error) && Util.nullSafeCaseInsensitiveEq(status,"PREHIRE")) {
					return true;
				}
				return false;
  			   
  			]]></Source>
      </Script>
    </Transition>
    <Transition to="Notify Manager">
      <Script>
        <Source><![CDATA[
  		   
  				import sailpoint.tools.Message;
  				import sailpoint.tools.Util;
  				if(wfcontext.getRootWorkflowCase().getMessages()== null && null == wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error) && Util.nullSafeCaseInsensitiveEq(status,"ACTIVE")){
					return true;
				}
				return false;
  			  
  	     ]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step action="call:sendEmail" condition="script:toAddress!=null" icon="Email" name="Notify Manager" posX="1721" posY="421">
    <Arg name="to" value="ref:toAddress"/>
    <Arg name="template" value="ref:managerEmailTemplate"/>
    <Arg name="managername" value="ref:managerName"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userName" value="ref:identityName"/>
    <Arg name="employeeId" value="ref:employeeId"/>
    <Arg name="userType" value="ref:assignmentType"/>
    <Description>Send Email to Manager</Description>
    <Transition to="Single Account Aggregation"/>
  </Step>
  <Step icon="Task" name="Single Account Aggregation" posX="1501" posY="660" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[
			    import org.apache.log4j.Logger;
	  			import sailpoint.api.IdentityService;
	  			import sailpoint.object.Application;
	  			import sailpoint.object.Identity;
	  			import sailpoint.object.Link;
	  			import sailpoint.tools.Util;
			  	
			  	Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-Rehire");
			  	
			  	if (isDebugEnabled) {
		          log.debug("CMH-LifecycleEvent-Leaver-Disable: Single Account Aggregation");
		        }
	
		        if (validationErrors == null) {
		          validationErrors = new ArrayList();
		        }
		        
				List accountRequests = new ArrayList();
				Identity identity = context.getObjectByName(Identity.class, identityName);
				Application application = context.getObjectByName(Application.class, adAppName);
				if (identity != null && application != null) {
					IdentityService ids = new IdentityService(context);
					List appLink = ids.getLinks(identity, application);
					if( null != appLink ) {
					    for (Link adLink : appLink) {
					         if(null != adLink) {
					            String nativeIdentity = adLink.getNativeIdentity();
					            String cn = calculateCN(nativeIdentity);
					            if(Util.isNotNullOrEmpty(cn)){
					               String newNativeIdentity = cn+","+enabledUserOU;
					               validationErrors.addAll(doTargetedAggregation(newNativeIdentity,adAppName,identityName));
					            }else {
					              validationErrors.add("CN Value is NULL");
					            }
					         }
					     }         
					}
				 }
			    if(isDebugEnabled){
	  				log.debug("CMH-LifecycleEvent-Leaver-Disable: Exiting Single Account Aggregation");
	  			 }
  			 return validationErrors;
      ]]></Source>
    </Script>
    <Transition to="Refresh Identity"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Refresh Identity" posX="1725" posY="658">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="correlateEntitlements" value="true"/>
    <Arg name="provision" value="true"/>
    <Arg name="promoteAttributes" value="true"/>
    <Arg name="refreshRoleMetadata" value="true"/>
    <Arg name="refreshScorecard" value="true"/>
    <Arg name="refreshIdentityEntitlements" value="true"/>
    <Arg name="synchronizeAttributes" value="true"/>
    <Transition to="Add Error Message"/>
  </Step>
  <Step action="call:addMessage" name="Add Error Message">
   <Arg name="message">
     <value>
       <Script>
         <Source>
			<![CDATA[
				import sailpoint.tools.Util;
				return Util.listToCsv(validationErrors);
          ]]>
         </Source>
       </Script>
     </value>
   </Arg>
   <Arg name="type" value="Error"/>
    <Transition to="end"/>
  </Step>
  <Step catches="complete" icon="Catches" name="Check Status" posX="99" posY="32">
    <Arg name="attributeName" value="string:Employee ID"/>
    <Arg name="source" value="string:CMH-LifecycleEvent-Rehire"/>
    <Arg name="attributeValue" value="ref:employeeId"/>
    <Arg name="target" value="ref:identityName"/>
    <Script>
      <Source><![CDATA[
  		
			  
	      	import sailpoint.tools.Message;
			import sailpoint.tools.Util;
			import org.apache.log4j.Logger;
			
			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-Rehire");
			if(validationErrors==null){
				validationErrors = new ArrayList();
			}
			if(adExists == false){
			   validationErrors.add("AD Link does exists");
			}
			if(wfcontext.getRootWorkflowCase().getMessages()!=null && null!=wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)){
				log.error("Error occured in rehire process: "+wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error));
				List errorMessagesList = wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error);
				String errorMessagesFromWfc = Util.listToCsv(errorMessagesList);
				validationErrors.add(errorMessagesFromWfc);
			}
			if(isDebugEnabled){
				log.debug("CMH-LifecycleEvent-Rehire : Errors recorded in Rehire process: "+validationErrors.toString());
			}
			if(Util.isEmpty(validationErrors) && adExists == true){
			    Map map = new HashMap();
			    map.put("setString1","Rehire is successfully completed" );
  				auditWrite("Rehire Success",source,target,attributeName,attributeValue,map);
				
  			}else{
  			    Map map = new HashMap();
  			    map.put("setString1","Rehire Process failed due to errors");
  				map.put("setString2",Util.listToCsv(validationErrors));
		  		auditWrite("Rehire Failure",source,target,attributeName,attributeValue,map);
  			}
  			
  			if(isDebugEnabled){
  			    log.debug("Check Status step : Audit Event Generated");
  			    log.debug("Ending the CMH-LifecycleEvent-Rehire for the user "+identityName);
  			}
  			
		
		]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="1603" posY="221"/>
</Workflow>
