<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,IdentityRequest" name="CMH-LifecycleEvent-Leaver-Disable" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>    
       The displayName of the identity being updated.  
       Query for this using a projection query and fall back to the name.    
</Description>
  </Variable>
  <Variable initializer="string:AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan" type="sailpoint.object.ProvisioningPlan">
    <Description>The provisioning plan which is built during the workflow.  
</Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>  
       String version of sailpoint.object.Source to indicate  
       where the request originated.  Defaults to LCM.  
</Description>
  </Variable>
  <Variable initializer="string:true" input="true" name="trace">
    <Description>  
       Used for debugging this workflow and when set to true trace  
       will be sent to stdout.  
    </Description>
  </Variable>
  <Variable name="project" type="ProvisioningProject">
    <Description>  
ProvisioningProject which is just a compiled version of the ProvisioningPlan.  
</Description>
  </Variable>
  <Variable name="identityRequestId">
    <Description>
		The Identity Request Id we get back from the request.
	</Description>
  </Variable>
  <Variable name="isDebugEnabled" type="boolean">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Leaver-Disable");
  			
  			if(log.isDebugEnabled()){
  				return true;
  			}
  			return false;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="employeeId">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Identity;
  			
  			String employeeId = null;
  			if(identityName != null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				if(null != iden) {
  				   employeeId = iden.getStringAttribute("employeeId");
  				} 				
  			}
  			return employeeId;
  		  
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="assignmentType">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			String assignmentType = null;
  			if(identityName != null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				if(null != iden) {
  				   assignmentType = iden.getStringAttribute("assignmentType");
  				}
  			}
  			if(Util.isNotNullOrEmpty(assignmentType)) {
               return assignmentType;
            }else {
               return null;
  			}
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="hasEmail" type="boolean">
    <Script>
      <Source><![CDATA[
  		 
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			
  			String email = null;
  			if(identityName != null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				if(null != iden) {  
  				   email= iden.getStringAttribute("email");
  				}
  				if(Util.isNotNullOrEmpty(email)) {
  				   return true;
  				}else {
  				   return false;
  				}
  			}  						
  		  
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="adAppName">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Custom;
  			
  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
  			String appName = null;
  			if(custom != null){
  				appName = custom.getString("adApplication");
  			}
  			return appName;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="disabledOU">
    <Script>
      <Source><![CDATA[
  		
  			    import sailpoint.object.Custom;
	  			import sailpoint.object.Identity;
	  			import sailpoint.tools.Util;
	  			
	  			Identity identity = context.getObjectByName(Identity.class,identityName);
	  			String disabledOU = null;
	  			if(null != identity) {
	  			   String legalHold = identity.getStringAttribute("identityRetention");
	  			   String userType =  identity.getStringAttribute("userType");
	  			   String customDisableAttr = null;
	  			   if(Util.nullSafeCaseInsensitiveEq("YES",legalHold)) {
	  			      if(Util.nullSafeCaseInsensitiveEq("EMPLOYEE",userType)){
	  			          customDisableAttr = "inactivEmployeeOU";
	  			      }else if(Util.nullSafeCaseInsensitiveEq("NONEMPLOYEE",userType)) {
	  			          customDisableAttr = "nonEmployeeOU";
	  			      }
	  			   }else {
	  			      customDisableAttr = "disabledOU";
	  			   }
	  			   if(Util.isNotNullOrEmpty(customDisableAttr)){
	  			      Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
	  			      if(custom != null){
	  				     disabledOU = custom.getString(customDisableAttr);
	  			      }
	  			   }
	  			}
	  			return disabledOU;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="validationErrors" type="java.util.List"/>
  <Variable name="connectedApps" type="java.util.List"/>
  <Variable name="disConnectedApps" type="java.util.List"/>
  <Variable name="snowTicketId"/>
  <Variable name="numberOfDays" type="Integer">
    <Description>Number of days after which accounts has to be deleted</Description>
    <Script>
    	<Source>
    	<![CDATA[
    		import sailpoint.object.Custom;
    		Custom custom = context.getObjectByName(Custom.class,"CMH-Leaver-Custom-Object");
    		int numberOfDays = 0;
    		if(custom!=null){
    			numberOfDays = custom.getInt("numberOfDaysToDelete");
    		}
    		return numberOfDays;
    	]]>
    	</Source>
    </Script>
  </Variable>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="CMH-AD-Generic-Rulelibrary"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="28" posY="10" wait="1">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Leaver-Disable");
  			if(isDebugEnabled){
  				log.debug("Starting the LifecycleEvent-Leaver-Disable Workflow for the user "+identityName);
  			}
  		
  		]]></Source>
    </Script>
    <Transition to="Validate Data"/>
  </Step>
  <Step icon="Task" name="Validate Data" posX="28" posY="18" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[
			  
            import org.apache.log4j.Logger;
  			import sailpoint.tools.Util;
  			
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Leaver-Disable");
  			
  			List errorList = new ArrayList();
  			if(Util.isNullOrEmpty(adAppName)) {
  			   errorList.add("The Custom Object is not configured properly with AD app name.Either Custom object or AD" +
  			   "application name in custom object is missing");
  			}
			
  			if(Util.isNullOrEmpty(disabledOU)) {
  			    errorList.add("The Custom Object is not configured properly with AD app name.Either Custom object or AD" +
  			   "disabled user OU in custom object is missing");
  			}
  			if(!Util.isEmpty(errorList)) {
  			  log.error("CMH-LifecycleEvent-Leaver-Disable: Errors Found :"+Util.listToCsv(errorList));
  			}else if(isDebugEnabled){
  				log.debug("CMH-LifecycleEvent-Leaver-Disable: Validation Successful");
  			}
  			return errorList;
			  
      ]]></Source>
    </Script>
    <Transition to="Get Connected Apps">
      <Script>
        <Source><![CDATA[
  			  
  				import sailpoint.tools.Util;
  				if(Util.isEmpty(validationErrors)){
					return true;
				}
				return false;
  			   
  			]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step icon="Task" name="Get Connected Apps" resultVariable="connectedApps">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Leaver-Disable");
  			List connectedApps = getAppsToProcess(identityName,"CMH-Leaver-Custom-Object","connectedApplications");
  			if(connectedApps==null || connectedApps.size()<=0){
  				log.info("CMH-LifecycleEvent-Leaver-Disable: There are no connected Apps associated with the user");
  			}
  			else if(isDebugEnabled){
  				log.debug("CMH-LifecycleEvent-Leaver-Disable: List of Connected Apps to be deleted: "+connectedApps.toString());
  			}
  			return connectedApps;
  		
  		]]></Source>
    </Script>
    <Transition to="Get Disconnected Apps"/>
  </Step>
  <Step icon="Task" name="Get Disconnected Apps" resultVariable="disConnectedApps">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Leaver-Disable");
  			List disConnectedApps = getAppsToProcess(identityName,"CMH-Leaver-Custom-Object","disConnectedApplications");
  			if(disConnectedApps==null || disConnectedApps.size()<=0){
  				log.info("CMH-LifecycleEvent-Leaver-Delete: There are no disconnected Apps associated with the user");
  			}
  			else if(isDebugEnabled){
  				log.debug("CMH-LifecycleEvent-Leaver-Delete: List of disConnected Apps to be deleted: "+disConnectedApps.toString());
  			}
  			return disConnectedApps;
  		
  		]]></Source>
    </Script>
    <Transition to="Set User Deletion Date and status"/>
  </Step>
  <Step icon="Task" name="Set User Deletion Date and status" posX="28" posY="18">
    <Script>
      <Source><![CDATA[
			  
            import java.text.SimpleDateFormat;
            import java.util.Date;
            import org.apache.log4j.Logger;
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
 
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Leaver-Disable");
  			
  			Identity iden = context.getObjectByName(Identity.class,identityName);
  			if(iden != null){
  				iden.setInactive(true);
  				iden.setAttribute("status","TERMINATED");
  				
  				Date today = new Date();
  				String format = getCustomObject("leaverDeleteTimestamp","CMH-DateFormat");
  				if(Util.isNotNullOrEmpty(format)) {
			    	SimpleDateFormat sdf = new SimpleDateFormat(format);
			    	Date deletetionDate =  Util.incrementDateByDays(today, numberOfDays);
			    	String deleteDate = sdf.format(deletetionDate);
			    	log.debug("CMH-LifecycleEvent-Leaver-Disable :deleteDate : "+deleteDate);
			    	
			    	iden.setAttribute("deletionDate",deleteDate);
	  				context.saveObject(iden);
	  				context.commitTransaction();
  				}
  				if(isDebugEnabled){
  					log.debug("CMH-LifecycleEvent-Leaver-Disable: Identity status "+identityName+" disabled succesfully");
  				}
  			}			  
      ]]></Source>
    </Script>
    <Transition to="Disable AD Application"/>
  </Step>
  <Step icon="Task" name="Disable AD Application" posX="28" posY="18" resultVariable="plan">
    <Script>
      <Source><![CDATA[
			    import org.apache.log4j.Logger;
	  			import sailpoint.api.IdentityService;
	  			import sailpoint.object.Application;
	  			import sailpoint.object.Identity;
	  			import sailpoint.object.Link;
	  			import sailpoint.object.ProvisioningPlan;
	  			import sailpoint.object.ProvisioningPlan.AccountRequest;
	  			import sailpoint.object.ProvisioningPlan.AttributeRequest;
	  			import sailpoint.tools.Util;
			  	
			  	Logger log = Logger.getLogger("CMH-LifecycleEvent-Leaver-Disable");
                ProvisioningPlan adPlan = new ProvisioningPlan();
				List accountRequests = new ArrayList();
				Identity identity = context.getObjectByName(Identity.class, identityName);
				
				for(String appName:connectedApps){
				    Application application = context.getObjectByName(Application.class, appName);
					if (identity != null && application != null) {
						IdentityService ids = new IdentityService(context);
						List appLink = ids.getLinks(identity, application);
						if( null != appLink ) {
							for (Link adLink : appLink) {
								if (null != adLink) {
								    AccountRequest accrq = new AccountRequest();
								    if(Util.nullSafeCaseInsensitiveEq(appName,adAppName)){
										accrq.setApplication(appName);
										accrq.setOperation(ProvisioningPlan.AccountRequest.Operation.Disable);
										accrq.setNativeIdentity(adLink.getNativeIdentity());
										accrq.add(new AttributeRequest("IIQDisabled", ProvisioningPlan.Operation.Set,true));
										accrq.add(new AttributeRequest("AC_NewParent",disabledOU));
										if (Util.nullSafeCaseInsensitiveEq(assignmentType, "EMPLOYEE")) {
											//Exchange code change employee to has email yes or no;
									    }	
									} else {
									    accrq.setApplication(appName);
										accrq.setOperation(ProvisioningPlan.AccountRequest.Operation.Disable);
									}
								 accountRequests.add(accrq);
								}
							}
						}
				    }
				}
				adPlan.setAccountRequests(accountRequests);
			    adPlan.setIdentity(identity);
			    if(isDebugEnabled){
	  				log.debug("CMH-LifecycleEvent-Leaver-Disable: Plan created for the user successfully: "+adPlan.toXml());
	  			}
  			
  			   return adPlan;	
	
      ]]></Source>
    </Script>
    <Transition to="Compile Project">
      <Script>
        <Source><![CDATA[
  		  
  			if(plan.getAccountRequests() != null && plan.getAccountRequests().size()>0 &&  Util.isEmpty(validationErrors)){
  				return true;
  			}
  			return false;
  		   
  		]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step action="call:compileProvisioningProject" icon="Task" name="Compile Project" posX="429" posY="150" resultVariable="project">
    <Arg name="requester" value="string:spadmin"/>
    <Arg name="requireCreateTemplates" value="string:false"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="noLocking" value="true"/>
    <Arg name="noApplicationTemplates" value="string:true"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="optimisticProvisioning" value="string:false"/>
    <Arg name="plan" value="ref:plan"/>
    <Description>Compile the provisioning plan into a provisioning project.  
                 If you need to pass in provisioner options like "noFiltering"  
                 or "noRoleDeprovisioning" you must pass them as explicit  
                 arguments to the call.  
                 The evaluation options "requester" and "source" are commonly  
                 set here.               
                 You can also pass things into the Template and Field scripts by  
                 defining Args in this step.</Description>
    <Transition to="Create Identity Request"/>
  </Step>
  <Step action="call:createIdentityRequest" icon="Task" name="Create Identity Request" posX="841" posY="239">
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="priority" value="string:Normal"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="flow" value="ref:flow"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:provisionProject" icon="Provision" name="Provision" posX="682" posY="10">
    <Arg name="background" value="false"/>
    <Arg name="project" value="ref:project"/>
    <Transition to="Complete Identity Request"/>
  </Step>
  <Step action="call:completeIdentityRequest" icon="Task" name="Complete Identity Request" posX="953" posY="94" resultVariable="identityRequest">
    <Arg name="project" value="ref:project"/>
    <Arg name="autoVerify" value="false"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Transition to="Create ServiceNow Ticket">
      <Script>
        <Source><![CDATA[
  			  
  				import sailpoint.tools.Message;
  				if(wfcontext.getRootWorkflowCase().getMessages()== null && null == wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)) {
					return true;
				}
				return false;
  			   
  			]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step icon="Task" name="Create ServiceNow Ticket" resultVariable="snowTicketId">
    <Script>
      <Source><![CDATA[
			  
				Logger log = Logger.getLogger("CMH-LifecycleEvent-Leaver-Disable");

		        if (isDebugEnabled) {
		          log.debug("CMH-LifecycleEvent-Leaver-Disable: Creating ServiceNow Ticket on disablement of user");
		        }
				if(validationErrors==null){
				validationErrors = new ArrayList();
			    }
			    String snowTicketId = null;
	            Object ticketObj = generateSnowTicket(identityName, "CMH-Service-Ticket-Configuration-Object", "DISABLE");
		        if(null != ticketObj) {
		           if(ticketObj instanceof List) {
		              List errList  = (List) ticketObj;
					  validationErrors.add(errList);
				   }else if(ticketObj instanceof String) {
		              snowTicketId = (String) ticketObj;	
					  log.debug("CMH-LifecycleEvent-Leaver-Disable:Ticket Created:"+snowTicketId);
                      wfcontext.getWorkflowCase().put("snowTicketId",snowTicketId);					  
		           }else {
		    	     validationErrors.add("The Object Type is NOT List OR String");					 
		           }
    	        }else {
				   validationErrors.add("NULL : Unable to generate ticket");				   
    	        }
				wfcontext.getWorkflowCase().put("validationErrors",validationErrors);
				return snowTicketId;
      ]]></Source>
    </Script>
    <Transition to="Single Account Aggregation"/>
  </Step>
  <Step icon="Task" name="Single Account Aggregation" posX="28" posY="18" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[
			    import org.apache.log4j.Logger;
	  			import sailpoint.api.IdentityService;
	  			import sailpoint.object.Application;
	  			import sailpoint.object.Identity;
	  			import sailpoint.object.Link;
	  			import sailpoint.object.ProvisioningPlan;
	  			import sailpoint.tools.Util;
			  	
			  	Logger log = Logger.getLogger("CMH-LifecycleEvent-Leaver-Disable");
			  	
			  	if (isDebugEnabled) {
		          log.debug("CMH-LifecycleEvent-Leaver-Disable: Single Account Aggregation");
		        }
	
		        if (validationErrors == null) {
		          validationErrors = new ArrayList();
		        }
		        
                ProvisioningPlan adPlan = new ProvisioningPlan();
				List accountRequests = new ArrayList();
				Identity identity = context.getObjectByName(Identity.class, identityName);
				Application application = context.getObjectByName(Application.class, adAppName);
				if (identity != null && application != null) {
					IdentityService ids = new IdentityService(context);
					List appLink = ids.getLinks(identity, application);
					if( null != appLink ) {
					    for (Link adLink : appLink) {
					         if(null != adLink) {
					            String nativeIdentity = adLink.getNativeIdentity();
					            String cn = nativeIdentity.substring(0,nativeIdentity.indexOf(","));
					            if(Util.isNotNullOrEmpty(cn)){
					               String newNativeIdentity = cn+","+disabledOU;
					               validationErrors.addAll(doTargetedAggregation(newNativeIdentity,adAppName,identityName));
					            }else {
					              validationErrors.add("CN Value is NULL");
					            }
					         }
					     }         
					}
				 }
			    if(isDebugEnabled){
	  				log.debug("CMH-LifecycleEvent-Leaver-Disable: Exiting Single Account Aggregation");
	  			 }
  			 return validationErrors;
      ]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step catches="complete" icon="Catches" name="Check Status" posX="778" posY="180">
    <Arg name="attributeName" value="string:Employee ID"/>
    <Arg name="source" value="string:CMH-LifecycleEvent-Leaver-Disable"/>
    <Arg name="attributeValue" value="ref:employeeId"/>
    <Arg name="target" value="ref:identityName"/>
    <Script>
      <Source><![CDATA[
  		
			  
	      	import sailpoint.tools.Message;
			import sailpoint.tools.Util;
			import java.util.ArrayList;
			import org.apache.log4j.Logger;
			
			Logger log = Logger.getLogger("CMH-LifecycleEvent-Leaver-Disable");
			if(validationErrors==null){
				validationErrors = new ArrayList();
			}
			if(wfcontext.getRootWorkflowCase().getMessages() != null && null != wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)){
				log.error("CMH-LifecycleEvent-Leaver-Disable: Error occured in leaver process: "+wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error));
				List errorMessagesList = wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error);
				String errorMessagesFromWfc = Util.listToCsv(errorMessagesList);
				validationErrors.add(errorMessagesFromWfc);
			}
			if(isDebugEnabled){
				log.debug("CMH-LifecycleEvent-Leaver-Disable : Errors recorded in Leaver process: "+validationErrors.toString());
			}
			if(Util.isEmpty(validationErrors)){
			    Map map = new HashMap();
			    map.put("setString1","Leaver Disable is successfully completed" );
  				auditWrite("Leaver-Disable Success",source,target,attributeName,attributeValue,map);
  				if(Util.isNotNullOrEmpty(snowTicketId)){
  					strMap.put("setString3","ServiceNow ticket : "+snowTicketId);
  				}
				
  			}else{
  			    Map map = new HashMap();
  			    int counter = validationErrors.size();
  			    if(counter >4) {
	  			    counter = 4;
  			    }
  			    for(int i=0; i<counter ; i++){
		  			map.put("setString".concat(Integer.toString(i+1)), validationErrors.get(i));
		  		}
		  		auditWrite("Leaver-Disable Failure",source,target,attributeName,attributeValue,map);
  			}
  			
  			if(isDebugEnabled){
  			    log.debug("CMH-LifecycleEvent-Leaver-Disable: Check Status step : Audit Event Generated");
  			}
  			
		]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="784" posY="10"/>
</Workflow>
