<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,IdentityRequest" name="CMH-LifecycleEvent-Name-Change" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>    
       The displayName of the identity being updated.  
       Query for this using a projection query and fall back to the name.    
</Description>
  </Variable>
  <Variable initializer="string:AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan" type="sailpoint.object.ProvisioningPlan">
    <Description>The provisioning plan which is built during the workflow.  
</Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>  
       String version of sailpoint.object.Source to indicate  
       where the request originated.  Defaults to LCM.  
</Description>
  </Variable>
  <Variable initializer="string:true" input="true" name="trace">
    <Description>  
       Used for debugging this workflow and when set to true trace  
       will be sent to stdout.  
    </Description>
  </Variable>
  <Variable name="project" type="ProvisioningProject">
    <Description>  
ProvisioningProject which is just a compiled version of the ProvisioningPlan.  
</Description>
  </Variable>
  <Variable name="identityRequestId">
    <Description>
		The Identity Request Id we get back from the request.
	</Description>
  </Variable>
  <Variable name="isDebugEnabled" type="boolean">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Name-Change");
  			
  			if(log.isDebugEnabled()){
  				return true;
  			}
  			return false;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="employeeId">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Identity;
  			
  			String employeeId = null;
  			if(identityName!=null){
  			   Identity iden = context.getObjectByName(Identity.class,identityName);
  			   if(null != iden) {
  				  employeeId = iden.getStringAttribute("employeeId");
  				}
  			}
  			return employeeId;
  		  
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="email">
    <Script>
      <Source><![CDATA[
  		 
  			import sailpoint.object.Identity;
  			
  			String email = null;
  			if(identityName!=null){
  			   Identity iden = context.getObjectByName(Identity.class,identityName);
  			   if(null != iden) {
  				  email= iden.getStringAttribute("email");
  				} 				
  			}  						
  		    return email;
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="hasEmail" type="boolean">
    <Script>
      <Source><![CDATA[
  		 
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			String email = null;
  			boolean hasMail = false;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
  				if(null != iden) {
	  				email= iden.getStringAttribute("email");
	  				if(Util.isNotNullOrEmpty(email)) {
	  				   hasMail = true;
	  				}
  			    }
  			} 
  			return hasMail;			
  		  
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="adAppName">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Custom;
  			
  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
  			String appName = null;
  			if(custom!=null){
  			   appName = custom.getString("adApplication");
  			}
  			return appName;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="hrAppName">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Custom;
  			
  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-Infor-Application");
  			String appName = null;
  			if(custom!=null){
  				appName = custom.getString("hrApplicationName");
  			}
  			return appName;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="adExists" type="boolean">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.api.IdentityService;
  			import sailpoint.object.Application;
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			
  			boolean isAdLinkPresent = false;
  			
  			if(Util.isNotNullOrEmpty(adAppName)) {
	  			Identity iden = context.getObjectByName(Identity.class,identityName);
	  			Application app = context.getObjectByName(Application.class,adAppName);
	  			List appList = null;
	  			if(iden != null && app != null){
	  				IdentityService iser = new IdentityService(context);
	  				appList = iser.getLinks(iden,app);
	  				if(appList != null && appList.size()>0){
	  					isAdLinkPresent= true;
	  				}
	  			 }
  			}
  			return isAdLinkPresent;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="managerName">
    <Description>Manager Name</Description>
    <Script>
      <Source><![CDATA[
		
        import sailpoint.object.Identity;
        Identity identityObject = context.getObject(Identity.class,identityName);
        if(identityObject != null){
          Identity managerIdentity = identityObject.getManager();
          if(managerIdentity!=null){
            return managerIdentity.getName();
          }
        }
        return null;
		
		]]></Source>
    </Script>
  </Variable>
  <Variable name="managerEmail">
    <Description>Manager Email</Description>
    <Script>
      <Source><![CDATA[
		
		import sailpoint.object.Identity;
		Identity identityObject = context.getObject(Identity.class,identityName);
		if(identityObject!=null){
			Identity managerIdentity = identityObject.getManager();
			if(managerIdentity!=null){
				return managerIdentity.getEmail();
			}
		}
		return null;
		
		]]></Source>
    </Script>
  </Variable>
  <Variable name="assignmentType">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;
  			
  			String assignmentType = null;
  			if(identityName!=null){
  			   Identity iden = context.getObjectByName(Identity.class,identityName);
  			   if( null != iden) {
  				  assignmentType = iden.getStringAttribute("assignmentType");
  			   }
  			}
  			if(Util.isNotNullOrEmpty(assignmentType)) {
               return assignmentType;
            }
            return null;
 
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable initializer="User Name Change Manager-Email" input="true" name="managerTemForUserHasEmail">
    <Description>
    The email template to use for manager notification for using having email.
  </Description>
  </Variable>
  <Variable initializer="User Name Change Manager-NoEmail" input="true" name="managerTemForUserHasNoEmail">
    <Description>
     The email template to use for manager notification.
  </Description>
  </Variable>
  <Variable initializer="User Name Change" input="true" name="userNameChange">
    <Description>
     The email template to use for user notification.
  </Description>
  </Variable>
  <Variable name="newIdentityName"/>
  <Variable name="newEmail"/>
  <Variable name="validationErrors" type="java.util.List"/>
  <Variable name="adAppLink" type="java.util.List"/>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="CMH-AD-Generic-Rulelibrary"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="28" posY="10" wait="1">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Name-Change");
  			if(isDebugEnabled){
  				log.debug("Starting the CMH-LifecycleEvent-Name-Change for the user "+identityName);
  			}
  		
  		]]></Source>
    </Script>
    <Transition to="Validate Data"/>
  </Step>
  <Step icon="Task" name="Validate Data" posX="28" posY="18" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[
			  
            import org.apache.log4j.Logger;
  			import sailpoint.tools.Util;
  			
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Name-Change");
  			
  			List errorList = new ArrayList();
  			if(Util.isNullOrEmpty(adAppName)) {
  			   errorList.add("The Custom Object is not configured properly with AD app name.Either Custom object or AD" +
  			   "application name in custom object is missing");
  			}
  			if(Util.isNullOrEmpty(hrAppName)) {
  			   errorList.add("The Custom Object is not configured properly with AD app name.Either Custom object or HR" +
  			   "application name in custom object is missing");
  			}
  			if(Util.isNullOrEmpty(managerName)) {
  			   errorList.add("User Manager Name is null, User's manager cannot be null");
  			}
  			if(Util.isNullOrEmpty(managerEmail)) {
  			    errorList.add("Manager doesn't have email, the manager must have email");
  			}
  			if(!Util.isEmpty(errorList)) {
  			  log.error("CMH-LifecycleEvent-Name-Change: Errors Found :"+Util.listToCsv(errorList));
  			}else if(isDebugEnabled){
  				log.debug("CMH-LifecycleEvent-Name-Change: Validation Successful");
  			}
  			return errorList;
			  
      ]]></Source>
    </Script>
    <Transition to="Generate User Name">
      <Script>
        <Source><![CDATA[
  			  
  				import sailpoint.tools.Util;
  				if(Util.isEmpty(validationErrors)){
					return true;
				}
				return false;
  			   
  			]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step icon="Task" name="Generate User Name" posX="28" posY="10">
    <Script>
      <Source><![CDATA[
  		      import sailpoint.object.Identity;
  		      import sailpoint.tools.Util;
  		      
  		      ResourceObject account = new ResourceObject();
  		      Identity identity = context.getObjectByName(Identity.class,identityName);
  		      String firstName = identity.getFirstname();
  		      String lastName = identity.getLastname();
  		      String middInitial = identity.getStringAttribute("middleInitial");
  		      
  		      if (isDebugEnabled) {
		          log.debug("CMH-LifecycleEvent-Name-Change");
		      }
	
		      if (validationErrors == null) {
		          validationErrors = new ArrayList();
		      }
		        
  		      if(Util.isNotNullOrEmpty(middInitial)) {
  		          middInitial.trim();
  		      }
  		      log.info("CMH-LifecycleEvent-Name-Change: Creating a new user by generating username & email from firstname & lastname of the user");
			  String finalUsername =null;
			  String genUsername = userNameGenerator(firstName,lastName,middInitial,employeeId);	//Generate a username based on firstname,lastname, middleInitial
		      log.debug("Generated Username "+genUsername);		
			  if(Util.isNotNullOrEmpty(genUsername)) {
				 finalUsername=finalUserName(genUsername,firstName,lastName,middInitial,employeeId);	//Validate the generated username for the uniqueness
			   }
			  log.debug("CMH-LifecycleEvent-Name-Change: finalUsername : "+finalUsername);
			  if(Util.isNotNullOrEmpty(finalUsername)) {
			     finalUsername =finalUsername.toLowerCase();
				 identity.setName(finalUsername);
				 identity.setDisplayName(finalUsername);
				 identity.setAttribute("userName",finalUsername);
				 if(hasEmail) {
					identity.setAttribute("email",finalUsername + "%%CMH-Mail-Domain%%");
				  }
				  context.saveObject(identity);
				  context.commitTransaction();
				}else {
				  log.error("The username for the user is NULL");
				  validationErrors.add("The username for the user is NULL");
				}
				
				wfcontext.getWorkflowCase().put("newIdentityName",finalUsername);
			
  		]]></Source>
    </Script>
    <Transition to="update Custom object">
      <Script>
        <Source><![CDATA[
               import sailpoint.tools.Util;
                
                if(Util.isNotNullOrEmpty(newIdentityName)){
                   return true;
                }else {
                   return false;
                }
    ]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step icon="Task" name="update Custom object" posX="28" posY="10" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[
                
                import sailpoint.object.Custom;
                import sailpoint.object.Attributes;
                import sailpoint.object.Identity;
                import sailpoint.tools.GeneralException;
                import sailpoint.tools.Util;
                
                if (isDebugEnabled) {
		          log.debug("CMH-LifecycleEvent-Name-Change: Updating custom Object");
		        }
		        if (validationErrors == null) {
		          validationErrors = new ArrayList();
		        }
		        String email =null;
		        Identity identity = context.getObjectByName(Identity.class, newIdentityName);
		        if( null != identity) {
                            email = identity.getEmail();
	                    Custom custom = null;
			    	try {
						custom = context.getObjectByName(Custom.class, "CMH-NameChange-UsernameAndEmail");
						if(null != custom) {
							String lock = custom.getLock();
							List list = custom.getAttributes().getList("NOTEXPORTED");
							if(list == null) {
								list = new ArrayList();
							}
							
							list.add(identity.getName());
							if(list != null) {
								custom.setLock(lock);
								custom.put("NOTEXPORTED",list );
								context.saveObject(custom);
								context.commitTransaction();
								custom.remove(lock);	
								}
						} else {
						   validationErrors.add("Custom Object is not configured properly");
						}
					} catch (GeneralException e) {
					    log.error("ERROR: "+e.getMessage());
						validationErrors.add(e.getMessage());
				    }
				}else {
				   validationErrors.add("ERROR : Unable to search the the user with newIdentityName");
				}  
		        if (isDebugEnabled) {
		          log.debug("CMH-LifecycleEvent-Name-Change: Exiting custom Object");
		        }
		        wfcontext.getWorkflowCase().put("newEmail",email);
		        return validationErrors;
          
        ]]></Source>
    </Script>
    <Transition to="update Name and Email in Infor"/>
  </Step>
  <Step icon="Task" name="update Name and Email in Infor" posX="28" posY="10">
    <Script>
      <Source><![CDATA[
	  		        import org.apache.log4j.Logger;
		  			import sailpoint.api.IdentityService;
		  			import sailpoint.object.Application;
		  			import sailpoint.object.Identity;
		  			import sailpoint.object.Link;
		  			import sailpoint.tools.Util;
  		           
  		            Logger log = Logger.getLogger("CMH-LifecycleEvent-Name-Change");
  		            
  		            Application application = context.getObjectByName(Application.class, hrAppName);
  		            Identity identity = context.getObjectByName(Identity.class, newIdentityName);
  		            if(null != application && null != identity) {
  		                IdentityService identityService = new IdentityService(context);
	  		            List links = identityService.getLinks(identity,application);
						if(links!=null && links.size()>0){
							Link hrLink = links.get(0);
							if(hrLink!=null){
								log.debug("CMH-LifecycleEvent-Name-Change: Updating infor details");
								hrLink.setNativeIdentity(newIdentityName);
								hrLink.setDisplayName(newIdentityName);
								hrLink.setAttribute("Username",newIdentityName);
								if(hasEmail){
									hrLink.setAttribute("WorkEmail",newIdentityName + "%%CMH-Mail-Domain%%");
								}
								context.saveObject(hrLink);
							}
						}
						context.commitTransaction();
				  }
  		]]></Source>
    </Script>
    <Transition to="Update AD Name and Email"/>
  </Step>
  <Step icon="Task" name="Update AD Name and Email" posX="28" posY="10" resultVariable="plan">
    <Script>
      <Source><![CDATA[
  		        import org.apache.log4j.Logger;
	  			import sailpoint.api.IdentityService;
	  			import sailpoint.object.Application;
	  			import sailpoint.object.Identity;
	  			import sailpoint.object.Link;
	  			import sailpoint.object.Attributes;
	  			import sailpoint.object.ProvisioningPlan;
	  			import sailpoint.object.ProvisioningPlan.AccountRequest;
	  			import sailpoint.object.ProvisioningPlan.AttributeRequest;
	  			import sailpoint.tools.Util;
			  	
			  	Logger log = Logger.getLogger("CMH-LifecycleEvent-Name-Change");
			  	
			  	if (validationErrors == null) {
		          validationErrors = new ArrayList();
		        }
                ProvisioningPlan adPlan = new ProvisioningPlan();
				List accountRequests = new ArrayList();
				Identity identity = context.getObjectByName(Identity.class, newIdentityName);
				Application application = context.getObjectByName(Application.class, adAppName);
				if (identity != null && application != null) {
				    String displayName = getDisplayName(identity.getFirstname(), identity.getLastname(), identity.getStringAttribute("middleInitial"));
					IdentityService ids = new IdentityService(context);
					List appLink = ids.getLinks(identity, application);
					if( null != appLink) {
						for (Link adLink : appLink) {
							if (null != adLink) {
							        String newName = "CN=".concat(newIdentityName);
									AccountRequest accModify = new AccountRequest();
								 	accModify.setApplication(adAppName);
								 	accModify.setOperation(ProvisioningPlan.AccountRequest.Operation.Modify);
									accModify.setNativeIdentity(adLink.getNativeIdentity());
								 	accModify.add(new AttributeRequest("AC_NewName", newName));
								 	accModify.add(new AttributeRequest("sAMAccountName",ProvisioningPlan.Operation.Set, newIdentityName));
								 	accModify.add(new AttributeRequest("givenName", ProvisioningPlan.Operation.Set,identity.getFirstname()));
								 	accModify.add(new AttributeRequest("sn",ProvisioningPlan.Operation.Set, identity.getLastname()));
								 	accModify.add(new AttributeRequest("displayNamePrintable",ProvisioningPlan.Operation.Set, newIdentityName));
								 	if(Util.isNotNullOrEmpty(displayName)) {
								 	   accModify.add(new AttributeRequest("displayName",ProvisioningPlan.Operation.Set,displayName ));
								 	}	
								 	if(hasEmail) {
								 	   accModify.add(new AttributeRequest("mail",ProvisioningPlan.Operation.Set,newIdentityName + "%%CMH-Mail-Domain%%"));
								 	   accModify.add(new AttributeRequest("userPrincipalName",ProvisioningPlan.Operation.Set,newIdentityName + "%%CMH-Mail-Domain%%"));								 	  
								 	}
								 	accountRequests.add(accModify);											 
							 }
						 }
					  }					
					adPlan.setAccountRequests(accountRequests);				 
		          }
			      adPlan.setIdentity(identity);
			      if(isDebugEnabled){
	  				log.debug("CMH-LifecycleEvent-Name-Change: Plan created for the user : "+adPlan.toXml());
	  			  }
  			    wfcontext.getWorkflowCase().put("validationErrors",validationErrors);
  			    return adPlan;	
  		]]></Source>
    </Script>
    <Transition to="Compile Project"/>
  </Step>
  <Step action="call:compileProvisioningProject" icon="Task" name="Compile Project" posX="429" posY="150" resultVariable="project">
    <Arg name="requester" value="string:spadmin"/>
    <Arg name="requireCreateTemplates" value="string:false"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="noLocking" value="true"/>
    <Arg name="noApplicationTemplates" value="string:true"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="optimisticProvisioning" value="string:false"/>
    <Arg name="plan" value="ref:plan"/>
    <Description>Compile the provisioning plan into a provisioning project.  
                 If you need to pass in provisioner options like "noFiltering"  
                 or "noRoleDeprovisioning" you must pass them as explicit  
                 arguments to the call.  
                 The evaluation options "requester" and "source" are commonly  
                 set here.               
                 You can also pass things into the Template and Field scripts by  
                 defining Args in this step.</Description>
    <Transition to="Create Identity Request"/>
  </Step>
  <Step action="call:createIdentityRequest" icon="Task" name="Create Identity Request" posX="841" posY="239">
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="priority" value="string:Normal"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="flow" value="ref:flow"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:provisionProject" icon="Provision" name="Provision" posX="682" posY="10">
    <Arg name="background" value="false"/>
    <Arg name="project" value="ref:project"/>
    <Transition to="Complete Identity Request"/>
  </Step>
  <Step action="call:completeIdentityRequest" icon="Task" name="Complete Identity Request" posX="953" posY="94" resultVariable="identityRequest">
    <Arg name="project" value="ref:project"/>
    <Arg name="autoVerify" value="false"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Transition to="Notify Manager">
      <Script>
        <Source><![CDATA[
  			  
  				import sailpoint.tools.Message;
  				if(wfcontext.getRootWorkflowCase().getMessages()== null && null == wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)) {
					return true;
				}
				return false;
  			   
  			]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step action="call:sendEmail" condition="script:managerEmail!=null" icon="Email" name="Notify Manager" posX="1264" posY="32">
    <Arg name="to" value="ref:managerEmail"/>
    <Arg name="template">
    	<Script>
    		<Source><![CDATA[
    		     import sailpoint.tools.Util;
  			     if(hasEmail==true && Util.isNotNullOrEmpty(newEmail)) {
  			        return managerTemForUserHasEmail;
  			     }else if(hasEmail==false && Util.isNullOrEmpty(newEmail) ) {
  			        return managerTemForUserHasNoEmail;
  			     }
  			]]>
      		</Source>
    	</Script>
    </Arg>
    <Arg name="managername" value="ref:managerName"/>
    <Arg name="userName" value="ref:newIdentityName"/>
    <Arg name="email">
       <Script>
         <Source><![CDATA[
    		     if(hasEmail==true) {
  			        return newEmail;
  			     }	
  			     ]]>
         </Source>
       </Script>
    </Arg>
    <Description>Send Email to Manager</Description>
    <Transition to="Notify User" when="return ((hasEmail==true) &amp;&amp; (null !=newEmail ))"/>
    <Transition to="Update Role Account Name"/>
  </Step>
  <Step action="call:sendEmail" condition="script:email!=null" icon="Email" name="Notify User" posX="1264" posY="32">
    <Arg name="to" value="ref:email"/>
    <Arg name="template" value="ref:userNameChange"/>
    <Arg name="identityName" value="ref:newIdentityName"/>
    <Arg name="userName" value="ref:newIdentityName"/>
    <Arg name="email" value="ref:newEmail"/>
    <Description>Send Email to User</Description>
    <Transition to="Update Role Account Name"/>
  </Step>
  <Step icon="Task" name="Update Role Account Name" posX="28" posY="18" resultVariable="validationErrors">
   <Script>
   <Source>
      <![CDATA[
               import org.apache.log4j.Logger;
               import sailpoint.object.Identity;
               import sailpoint.object.RoleAssignment;
			   import sailpoint.tools.Util;
			   import sailpoint.object.RoleTarget;
			   
			   Logger log = Logger.getLogger("CMH-LifecycleEvent-Name-Change");
			   
			   if (isDebugEnabled) {
		          log.debug("CMH-LifecycleEvent-Name-Change: Update Role Account Name");
		        }
	            Identity iden = context.getObjectByName(Identity.class, newIdentityName);
					
		       List userRole = iden.getActiveRoleAssignments();
		       if(!Util.isEmpty(userRole)) {
			      for(RoleAssignment role : userRole) {
					  List targets = role.getTargets();
					  if(!Util.isEmpty(targets)) {
						 for(RoleTarget roleTarget : targets) {
							 roleTarget.setDisplayName(newIdentityName);
							 context.commitTransaction();
							 log.debug("New display Name :"+roleTarget.getDisplayName());
						 }
					  }
			      }
		       }
		     log.debug("CMH-LifecycleEvent-Name-Change: Update Role Account Name");
      ]]>
      </Source>
   </Script>
    <Transition to="Single Account Aggregation"/>
  </Step>
  <Step icon="Task" name="Single Account Aggregation" posX="28" posY="18" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[
			    import org.apache.log4j.Logger;
	  			import sailpoint.api.IdentityService;
	  			import sailpoint.object.Application;
	  			import sailpoint.object.Identity;
	  			import sailpoint.object.Link;
	  			import sailpoint.object.ProvisioningPlan;
	  			import sailpoint.tools.Util;
			  	
			  	Logger log = Logger.getLogger("CMH-LifecycleEvent-Name-Change");
			  	
			  	if (isDebugEnabled) {
		          log.debug("CMH-LifecycleEvent-Name-Change: Single Account Aggregation");
		        }
	
		        if (validationErrors == null) {
		          validationErrors = new ArrayList();
		        }
		        
                ProvisioningPlan adPlan = new ProvisioningPlan();
				List accountRequests = new ArrayList();
				Identity identity = context.getObjectByName(Identity.class, newIdentityName);
				Application application = context.getObjectByName(Application.class, adAppName);
				if (identity != null && application != null) {
					IdentityService ids = new IdentityService(context);
					List appLink = ids.getLinks(identity, application);
					if( null != appLink ) {
					   for (Link adLink : appLink) {
					        if(null != adLink) {
					            String accLink = adLink.getNativeIdentity();
						        String userOU = accLink.substring(accLink.indexOf(","));
					            String newNativeIdentity = "CN=".concat(newIdentityName).concat(userOU);
					            validationErrors.addAll(doTargetedAggregation(newNativeIdentity,adAppName,newIdentityName));
					         }
					     }
					 }         
				}
				
			    if(isDebugEnabled){
	  				log.debug("CMH-LifecycleEvent-Name-Change: Exiting Single Account Aggregation");
	  			 }
  			 return validationErrors;
      ]]></Source>
    </Script>
    <Transition to="Refresh Identity"/>
  </Step>
      <Step action="call:refreshIdentity" icon="Task" name="Refresh Identity">
    <Arg name="identityName" value="ref:newIdentityName"/>
    <Arg name="correlateEntitlements" value="true"/>
    <Arg name="refreshRoleMetadata" value="true"/>
    <Arg name="refreshIdentityEntitlements" value="true"/>
    <Transition to="end"/>
  </Step>
  <Step catches="complete" icon="Catches" name="Check Status" posX="778" posY="180">
    <Arg name="attributeName" value="string:Employee ID"/>
    <Arg name="source" value="string:CMH-LifecycleEvent-Name-Change"/>
    <Arg name="attributeValue" value="ref:employeeId"/>
    <Arg name="target" value="ref:identityName"/>
    <Script>
      <Source><![CDATA[
  		
			  
	      	import sailpoint.tools.Message;
			import sailpoint.tools.Util;
			import java.util.ArrayList;
			import java.util.HashMap;
			import org.apache.log4j.Logger;
			
			Logger log = Logger.getLogger("CMH-LifecycleEvent-Name-Change");
			if(validationErrors==null){
				validationErrors = new ArrayList();
			}
			if(wfcontext.getRootWorkflowCase().getMessages()!=null && null!=wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)){
				log.error("CMH-LifecycleEvent-Name-Change: Error occured in Name Change process: "+wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error));
				List errorMessagesList = wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error);
				String errorMessagesFromWfc = Util.listToCsv(errorMessagesList);
				validationErrors.add(errorMessagesFromWfc);
			}
			if(isDebugEnabled){
				log.debug("CMH-LifecycleEvent-Name-Change : Errors recorded in Name Change process: "+validationErrors.toString());
			}
			if(Util.isEmpty(validationErrors)){
			    Map map = new HashMap();
			    map.put("setString1","Name Change is successfully completed" );
  				auditWrite("Name Change Success",source,target,attributeName,attributeValue,map);
				
  			}else{
  			    Map map = new HashMap();
  			    int counter = validationErrors.size();
  			    if(counter >4) {
	  			    counter = 4;
  			    }
  			    for(int i=0; i<counter ; i++){
		  			map.put("setString".concat(Integer.toString(i+1)), validationErrors.get(i));
		  		}
		  		auditWrite("Name Change Failure",source,target,attributeName,attributeValue,map);
  			}
  			
  			if(isDebugEnabled){
  			    log.debug("CMH-LifecycleEvent-Name-Change: Check Status step : Audit Event Generated");
  			}
  			
		
		]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="784" posY="10"/>
</Workflow>
