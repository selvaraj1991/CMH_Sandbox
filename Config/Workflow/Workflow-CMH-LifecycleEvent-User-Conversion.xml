<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,IdentityRequest" name="CMH-LifecycleEvent-User-Conversion" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
       The displayName of the identity being updated.
       Query for this using a projection query and fall back to the name.
	</Description>
  </Variable>
  <Variable initializer="string:AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan" type="sailpoint.object.ProvisioningPlan">
    <Description>The provisioning plan which is built during the workflow.
	</Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>
       String version of sailpoint.object.Source to indicate
       where the request originated.  Defaults to LCM.
	</Description>
  </Variable>
  <Variable initializer="string:true" input="true" name="trace">
    <Description>
       Used for debugging this workflow and when set to true trace
       will be sent to stdout.
    </Description>
  </Variable>
  <Variable name="project" type="ProvisioningProject">
    <Description>
		ProvisioningProject which is just a compiled version of the ProvisioningPlan.
	</Description>
  </Variable>
  <Variable name="identityRequestId">
    <Description>
		The Identity Request Id we get back from the request.
	</Description>
  </Variable>
  <Variable name="isDebugEnabled" type="boolean">
    <Script>
      <Source><![CDATA[

  			import org.apache.log4j.Logger;

  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion");

  			if(log.isDebugEnabled()){
  				return true;
  			}
  			return false;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="employeeId">
    <Script>
      <Source><![CDATA[

  			import sailpoint.object.Identity;

  			String employeeId = null;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
				if(iden!=null){
					employeeId = iden.getStringAttribute("employeeId");
				}
  			}
  			return employeeId;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="assignmentType">
    <Script>
      <Source><![CDATA[

  			import sailpoint.object.Identity;

  			String assignmentType = null;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
				if(iden!=null){
					assignmentType = iden.getStringAttribute("assignmentType");
				}
  			}
  			return assignmentType;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="emailRequired">
    <Script>
      <Source><![CDATA[

  			import sailpoint.object.Identity;

  			String emailRequired = null;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
				if(iden!=null){
					emailRequired = iden.getStringAttribute("mailReqd");
				}
  			}
  			return emailRequired;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="eMail">
    <Script>
      <Source><![CDATA[

  			import sailpoint.object.Identity;

  			String email = null;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
				if(iden!=null){
					email = iden.getStringAttribute("email");
				}
  			}
  			return email;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="oldEmployeeId">
    <Script>
      <Source><![CDATA[

  			import sailpoint.object.Identity;

  			String oldEmpId = null;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
				if(iden!=null){
					oldEmpId = iden.getStringAttribute("otherEmpId");
				}
  			}
  			return oldEmpId;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="oldEmpName">
    <Script>
      <Source><![CDATA[

  			import sailpoint.object.Filter;
  			import sailpoint.object.Identity;
  			import sailpoint.object.QueryOptions;

  			if(oldEmployeeId!=null){
  				QueryOptions ops = new QueryOptions();
				Filter f = Filter.eq("employeeId",oldEmployeeId);
				ops.addFilter(f);
				Iterator existingUsers = context.search(Identity.class,ops);
				if(existingUsers!=null && existingUsers.hasNext()){
					Identity iden = (Identity)existingUsers.next();
					if(iden!=null){
						return iden.getName();
					}
				}
  			}
  			return null;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="adAppName">
    <Script>
      <Source><![CDATA[

  			import sailpoint.object.Custom;

  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
  			String appName = null;
  			if(custom!=null){
  				appName = custom.getString("adApplication");
  			}
  			return appName;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="oldUserAdExists" type="boolean">
    <Script>
      <Source><![CDATA[

  			import sailpoint.api.IdentityService;
  			import sailpoint.object.Application;
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;

  			if(Util.isNotNullOrEmpty(oldEmpName) && Util.isNotNullOrEmpty(adAppName)){
  				Identity iden = context.getObjectByName(Identity.class,oldEmpName);
	  			Application app = context.getObjectByName(Application.class,adAppName);
	  			List appList = null;
	  			if(iden!=null && app!=null){
	  				IdentityService iser = new IdentityService(context);
	  				appList = iser.getLinks(iden,app);
	  				if(appList!=null && appList.size()>0){
	  					return true;
	  				}
	  			}
  			}
  			return false;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="newUserAdExists" type="boolean">
    <Script>
      <Source><![CDATA[

  			import sailpoint.api.IdentityService;
  			import sailpoint.object.Application;
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;

  			if(Util.isNotNullOrEmpty(identityName) && Util.isNotNullOrEmpty(adAppName)){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
	  			Application app = context.getObjectByName(Application.class,adAppName);
	  			List appList = null;
	  			if(iden!=null && app!=null){
	  				IdentityService iser = new IdentityService(context);
	  				appList = iser.getLinks(iden,app);
	  				if(appList!=null && appList.size()>0){
	  					return true;
	  				}
	  			}
  			}
  			return false;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="oldMailExists" type="boolean">
    <Script>
      <Source><![CDATA[

  			import sailpoint.object.Identity;
  			import sailpoint.tools.Util;

  			if(Util.isNotNullOrEmpty(oldEmpName)){
  				Identity iden = context.getObjectByName(Identity.class,oldEmpName);
  				if(iden!=null && Util.isNotNullOrEmpty(iden.getEmail())){
  					return true;
  				}
  			}

  			return false;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="o365Licenses" type="java.util.List">
    <Script>
      <Source><![CDATA[

  			import sailpoint.object.Custom;

  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
  			List license = new ArrayList();
  			if(custom!=null){
  				license = custom.getList("O365License");
  			}
  			return license;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="userStatus">
    <Script>
      <Source><![CDATA[

  			import sailpoint.object.Identity;

  			String userStatus = null;
  			if(identityName!=null){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
				if(iden!=null){
					userStatus = iden.getStringAttribute("status");
				}
  			}
  			return userStatus;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="newUserOU">
    <Script>
      <Source><![CDATA[

  			import sailpoint.object.Custom;
  			import sailpoint.tools.Util;

  			String newOU = null;
  			Custom custom = context.getObjectByName(Custom.class,"CMH-User-OU-Mapping-Custom-Object");
  			if(custom!=null && Util.isNotNullOrEmpty(assignmentType)){
  				newOU = custom.getString(assignmentType);
  			}
  			return newOU;

  		]]></Source>
    </Script>
  </Variable>
  <Variable name="validationErrors" type="java.util.List"/>
  <Variable name="isADdisabled" type="boolean"/>
  <Description>Enable the AD and Exchange accounts provisioned as part of birthright access for the Pre-hired users</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="CMH-AD-Generic-Rulelibrary"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="95" posY="96" wait="1">
    <Script>
      <Source><![CDATA[

  			import org.apache.log4j.Logger;

  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion");
  			if(isDebugEnabled){
  				log.debug("Starting the User Conversion Workflow for the user "+identityName);
  			}

  		]]></Source>
    </Script>
    <Transition to="Validate Data"/>
  </Step>
  <Step icon="Analysis" name="Validate Data" posX="218" posY="95" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[

  			import org.apache.log4j.Logger;
  			import sailpoint.tools.Util;

  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion");

  			List errorList = new ArrayList();
  			if(Util.isNullOrEmpty(oldEmployeeId)){
  				errorList.add("Cannot proceed with user conversion since the oldEmployeeId for the user is null or empty");
  			}

  			if(Util.isNullOrEmpty(oldEmpName)){
  				errorList.add("Cannot proceed with user conversion since the user with Employee ID: "+oldEmployeeId+" doesn't exist in IIQ");
  			}
  			if(Util.isNullOrEmpty(adAppName)){
  				errorList.add("The Custom Object is not configured properly with AD app name. Either Custom object or AD application name in custom object is missing");
  			}

  			if(Util.isEmpty(o365Licenses)){
  				errorList.add("The Custom Object is not configured properly with O365 License. Either Custom object or License entry in custom object is missing");
  			}

  			if(Util.isNullOrEmpty(newUserOU)){
  				errorList.add("The Custom Object is not configured properly with OU details. Either Custom object or OU entry in custom object is missing");
  			}

  			if(Util.nullSafeCaseInsensitiveEq(assignmentType,"EMPLOYEE") && Util.isNullOrEmpty(eMail)){
  				errorList.add("The email for the user is not configured, hence cannot proceed with user conversion for the user "+identityName);
  			}else if(Util.nullSafeCaseInsensitiveEq(emailRequired,"YES") && Util.isNullOrEmpty(eMail)){
  				errorList.add("The email for the user is not configured, hence cannot proceed with user conversion for the user "+identityName);
  			}

  			if(!Util.isEmpty(errorList))
  			{
  				log.error("Errors Found :"+Util.listToCsv(errorList));
  			}else if(isDebugEnabled){
  				log.debug("Validation Successful");
  			}

  			return errorList;

  		]]></Source>
    </Script>
    <Transition to="Update Identity">
      <Script>
        <Source><![CDATA[

  				import sailpoint.tools.Util;
  				if(Util.isEmpty(validationErrors)){
					return true;
				}
				return false;

  			]]></Source>
      </Script>
    </Transition>
    <Transition to="Add Error Message"/>
  </Step>
  <Step icon="Default" name="Update Identity" posX="285" posY="210">
    <Script>
      <Source><![CDATA[
            import sailpoint.api.ObjectUtil;
  			import sailpoint.object.Identity;

  			Identity iden = acquireLockOnIdentity(identityName);
  			if(iden!=null){
  				iden.setAttribute("isConversionProcessed","YES");
  				context.saveObject(iden);
  				context.commitTransaction();
  				ObjectUtil.unlockIdentity(context,iden);
  			}
            
  		]]></Source>
    </Script>
    <Transition to="Check AD Status"/>
  </Step>
  <Step condition="script:oldUserAdExists" icon="Audit" name="Check AD Status" posX="480" posY="211" resultVariable="isADdisabled">
    <Script>
      <Source><![CDATA[

  			import org.apache.log4j.Logger;
  			import sailpoint.api.IdentityService;
  			import sailpoint.object.Application;
  			import sailpoint.object.Identity;
  			import sailpoint.object.Link;

  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion");

  			log.debug("Check if the AD account of previous user is disabled");
  			boolean isADdisabled = false;
  			if(oldEmpName!=null){
  				Identity iden = context.getObjectByName(Identity.class,oldEmpName);
	  			Application app = context.getObjectByName(Application.class,adAppName);
	  			List appList = null;
	  			if(iden!=null && app!=null){
	  				IdentityService iser = new IdentityService(context);
	  				appList = iser.getLinks(iden,app);
	  				if(appList!=null && appList.size()>0){
	  					for(Link li: appList){
	  						if(li.isDisabled()){
	  							isADdisabled = true;
	  						}
	  					}
	  				}
	  			}
  			}

  			return isADdisabled;

  		]]></Source>
    </Script>
    <Transition to="Link AD Account" when="script:oldUserAdExists"/>
    <Transition to="Create New AD Account" when="script:!oldUserAdExists &amp;&amp; !newUserAdExists"/>
    <Transition to="Add Error Message">
      <Script>
        <Source><![CDATA[

  				if(validationErrors==null){
  					validationErrors = new ArrayList();
  				}
  				validationErrors.add("The existing User  "+oldEmpName+" ("+oldEmployeeId+" ) is not having AD account and the new User "+identityName+" ("+employeeId+") is having an AD account. Hence cannot proceed with User conversion.");
  				wfcontext.getRootWorkflowCase().put("validationErrors",validationErrors);
  				return true;

  			]]></Source>
      </Script>
    </Transition>
  </Step>
  <Step icon="Task" name="Link AD Account" posX="682" posY="126" wait="1">
    <Arg name="trace" value="ref:trace"/>
    <Arg name="appName" value="ref:adAppName"/>
    <Arg name="oldIdentityName" value="ref:oldEmpName"/>
    <Arg name="isDebugEnabled"/>
    <Arg name="newIdentityName" value="ref:identityName"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="CMH-Link-AD-Account-Workflow"/>
    </WorkflowRef>
    <Transition to="Update AD Account"/>
  </Step>
  <Step icon="Task" name="Update AD Account" posX="856" posY="126" resultVariable="plan">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userStatus" value="ref:userStatus"/>
    <Arg name="newUserOU" value="ref:newUserOU"/>
    <Arg name="project"/>
    <Arg name="employeeId" value="ref:employeeId"/>
    <Arg name="identityRequestId"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="assignmentType" value="ref:assignmentType"/>
    <Arg name="adAppName" value="ref:adAppName"/>
    <Arg name="eMail" value="ref:eMail"/>
    <Arg name="isADdisabled" value="ref:isADdisabled"/>
    <Arg name="isDebugEnabled"/>
    <Arg name="emailRequired" value="ref:emailRequired"/>
    <Arg name="plan"/>
    <Arg name="flow" value="ref:flow"/>
    <Return merge="true" name="validationErrors" to="validationErrors"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="CMH-Update-AD-Account-Workflow"/>
    </WorkflowRef>
    <Transition to="Do Target Aggregation">
      <Script>
        <Source><![CDATA[

				import sailpoint.tools.Message;

				if(validationErrors==null || validationErrors.size()<=0){
					return true;
				}else if(wfcontext.getRootWorkflowCase().getMessages()==null || wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)==null){
					return true;
				}
				return false;

			]]></Source>
      </Script>
    </Transition>
	<Transition to="Add Error Message">
		<Script>
			<Source>
			<![CDATA[
				if(validationErrors!=null && validationErrors.size()>0){
					return true;
				}
				return false;
			]]>
			</Source>
		</Script>
	</Transition>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Task" name="Create New AD Account" posX="546" posY="302">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="project"/>
    <Arg name="identityRequestId"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="isDebugEnabled"/>
    <Arg name="plan"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="adAppName" value="ref:adAppName"/>
    <Return merge="true" name="validationErrors" to="validationErrors"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="CMH-Create-AD-Account-Workflow"/>
    </WorkflowRef>
    <Transition to="Provision O365 License">
      <Script>
        <Source><![CDATA[

  				import sailpoint.tools.Util;
  				if(Util.nullSafeCaseInsensitiveEq(userStatus,"ACTIVE")){
	  				if(Util.nullSafeCaseInsensitiveEq(assignmentType,"EMPLOYEE") || Util.nullSafeCaseInsensitiveEq(emailRequired,"Yes")){
	  					return true;
	  				}
  				}
  				return false;

  			]]></Source>
      </Script>
    </Transition>
    <Transition to="Refresh Identity">
      <Script>
        <Source><![CDATA[

				import sailpoint.tools.Message;

				if(validationErrors==null || validationErrors.size()<=0){
					return true;
				}else if(wfcontext.getRootWorkflowCase().getMessages()==null || wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)==null){
					return true;
				}
				return false;

			]]></Source>
      </Script>
    </Transition>
	<Transition to="Add Error Message">
		<Script>
			<Source>
			<![CDATA[
				if(validationErrors!=null && validationErrors.size()>0){
					return true;
				}
				return false;
			]]>
			</Source>
		</Script>
	</Transition>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Task" name="Provision O365 License" posX="987" posY="425">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="adExists"/>
    <Arg name="O365Lic" value="ref:o365Licenses"/>
    <Arg name="project"/>
    <Arg name="identityRequestId"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="isDebugEnabled"/>
    <Arg name="plan"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="adAppName" value="ref:adAppName"/>
    <Return merge="true" name="validationErrors" to="validationErrors"/>
   <!-- <WorkflowRef>
       <Reference class="sailpoint.object.Workflow" name="CMH-Provision-O365-License-Workflow"/>  //uncommented when O365 is implemented
    </WorkflowRef>-->
    <Transition to="Refresh Identity">
      <Script>
        <Source><![CDATA[

				import sailpoint.tools.Message;

				if(validationErrors==null || validationErrors.size()<=0){
					return true;
				}else if(wfcontext.getRootWorkflowCase().getMessages()==null || wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)==null){
					return true;
				}
				return false;

			]]></Source>
      </Script>
    </Transition>
	<Transition to="Add Error Message">
		<Script>
			<Source>
			<![CDATA[
				if(validationErrors!=null && validationErrors.size()>0){
					return true;
				}
				return false;
			]]>
			</Source>
		</Script>
	</Transition>
    <Transition to="Stop"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Default" name="Refresh Identity" posX="1299" posY="252">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="correlateEntitlements" value="true"/>
    <Arg name="provision" value="true"/>
    <Arg name="refreshRoleMetadata" value="true"/>
	<Arg name="refreshIdentityEntitlements" value="true"/>
	<Transition to="Add Error Message">
		<Script>
			<Source>
			<![CDATA[
				if(validationErrors!=null && validationErrors.size()>0){
					return true;
				}
				return false;
			]]>
			</Source>
		</Script>
	</Transition>
    <Transition to="Stop"/>
  </Step>
  <Step action="call:addMessage" name="Add Error Message">
	<Arg name="message">
		<value>
			<Script>
				<Source>
				<![CDATA[
					import sailpoint.tools.Util;
					return Util.listToCsv(validationErrors);
				]]>
				</Source>
			</Script>
		</value>
	</Arg>
	<Arg name="type" value="Error"/>
	<Transition to="Stop"/>
  </Step>
  <Step icon="Default" name="Do Target Aggregation" posX="922" posY="334" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[

  			import sailpoint.api.IdentityService;
			import sailpoint.object.Application;
			import sailpoint.object.Identity;
			import sailpoint.object.Link;
			import sailpoint.tools.Util;

			if(validationErrors==null){
				validationErrors = new ArrayList();
			}
			Identity iden = context.getObjectByName(Identity.class,identityName);
			Application app = context.getObjectByName(Application.class,adAppName);
			if (iden!=null && app != null) {
				IdentityService idnService = new IdentityService(context);
               	List adLinks = idnService.getLinks(iden, app);
           		for (Link adLink : adLinks) {
           			if(adLink!=null){
	           			String nativeIdentity = adLink.getNativeIdentity();
	           			if(Util.isNotNullOrEmpty(nativeIdentity)){
	           				String userCN = calculateCN(nativeIdentity);
           					if(Util.isNotNullOrEmpty(userCN)){
           						String newUserDN = userCN+","+newUserOU;
           						validationErrors.addAll(doTargetedAggregation(newUserDN,adAppName,identityName));
	           				}
	           			}
           			}
              	}
            }
            return validationErrors;

  		]]></Source>
    </Script>
    <Transition to="Provision O365 License">
      <Script>
        <Source><![CDATA[

  				import sailpoint.tools.Util;
  				if(Util.nullSafeCaseInsensitiveEq(userStatus,"ACTIVE") && !oldMailExists){
	  				if(Util.nullSafeCaseInsensitiveEq(assignmentType,"EMPLOYEE") || Util.nullSafeCaseInsensitiveEq(emailRequired,"Yes")){
	  					return true;
	  				}
  				}
  				return false;

  			]]></Source>
      </Script>
    </Transition>
    <Transition to="Refresh Identity">
      <Script>
        <Source><![CDATA[

				if(validationErrors==null || validationErrors.size()<=0){
					return true;
				}
				return false;

			]]></Source>
      </Script>
    </Transition>
	<Transition to="Add Error Message">
		<Script>
			<Source>
			<![CDATA[
				if(validationErrors!=null && validationErrors.size()>0){
					return true;
				}
				return false;
			]]>
			</Source>
		</Script>
	</Transition>
    <Transition to="Stop"/>
  </Step>
  <Step catches="complete" icon="Catches" name="Check Status" posX="94" posY="6">
    <Script>
      <Source><![CDATA[
  			import org.apache.log4j.Logger;
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Message;
  			import sailpoint.tools.Util;

  			Logger log = Logger.getLogger("Workflow.CMH-LifecycleEvent-User-Conversion");

  			if(isDebugEnabled){
  				log.debug("Check Status step : Checking for errors");
  			}

  			if(wfcontext.getRootWorkflowCase().getMessages()!=null && wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)!=null){
  				List errorMessagesList = wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error);
  				String errorMessage = Util.listToCsv(errorMessagesList);
  				if(validationErrors==null){
  					validationErrors = new ArrayList();
  				}
  				validationErrors.add(errorMessage);

  				if(isDebugEnabled){
	  				log.debug("Check Status step : Errors Found : "+Util.listToCsv(validationErrors));
	  			}
  			}

  			if(validationErrors!=null && validationErrors.size()>0){
  				Identity iden = context.getObjectByName(Identity.class,identityName);
	  			if(iden!=null){
	  				iden.setAttribute("isConversionProcessed","NO");
	  				context.saveObject(iden);
	  				context.commitTransaction();
	  			}
  			}

  			String action = null;
  			String target = identityName;
  			String attrName = "Employee ID";
  			String attrVal = employeeId;
  			Map strMap = new HashMap();
  			if(Util.isEmpty(validationErrors)){
  				action = "UserConversion-Success";
  				strMap.put("setString1","UserConversion Completed succesfully");
  				strMap.put("setString2","AD account moved to new user successfully");
  			}else{
  				action = "UserConversion-Failure";
  				strMap.put("setString1","UserConversion failed due to errors");
  				strMap.put("setString2",Util.listToCsv(validationErrors));
  			}
  			auditWrite(action,source,target,attrName,attrVal,strMap);
            if(isDebugEnabled){
  				log.debug("Ending the User Conversion Workflow for the user "+identityName);
  			}

  		]]></Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="1301" posY="130"/>
</Workflow>
