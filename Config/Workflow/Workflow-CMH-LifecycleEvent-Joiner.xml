<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,IdentityRequest" name="CMH-LifecycleEvent-Joiner" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>    
       The displayName of the identity being updated.  
       Query for this using a projection query and fall back to the name.    
</Description>
  </Variable>
  <Variable initializer="string:AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan" type="sailpoint.object.ProvisioningPlan">
    <Description>The provisioning plan which is built during the workflow.  
</Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>  
       String version of sailpoint.object.Source to indicate  
       where the request originated.  Defaults to LCM.  
</Description>
  </Variable>
  <Variable initializer="string:true" input="true" name="trace">
    <Description>  
       Used for debugging this workflow and when set to true trace  
       will be sent to stdout.  
    </Description>
  </Variable>
  <Variable name="project" type="ProvisioningProject">
    <Description>  
ProvisioningProject which is just a compiled version of the ProvisioningPlan.  
</Description>
  </Variable>
  <Variable editable="true" initializer="false" name="optimisticProvisioning">
    <Description>Flag which makes the workflow treat the provisioning process as successful even when it is in a queued status; usually used for demo mode, but occasionally used for systems managed through a ticketing system or provisioning system which are not frequently reaggregated into IdentityIQ</Description>
  </Variable>
  <Variable editable="true" initializer="false" name="foregroundProvisioning">
    <Description>Flag which keeps provisioning in the foreground so the provisioning is known to have completed when control is returned to the user; otherwise, provisioning steps are usually backgrounded, releasing the requester's session while the provisioning actions take place, which is more efficient for users in a production environment. This flag is usually set to true only in development/testing environments and in demo mode.</Description>
  </Variable>
  <Variable initializer="script:new Integer(2);" name="retryTime" type="integer">
    <Description>Retry timeout.</Description>
  </Variable>
  <Variable initializer="script:new Integer(0);" name="retries" output="true" type="integer"/>
  <Variable name="isDebugEnabled" type="boolean">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Joiner");
  			
  			if(log.isDebugEnabled()){
  				return true;
  			}
  			return false;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="userStatus">
    <Description>User Status</Description>
    <Script>
      <Source><![CDATA[
		
        import sailpoint.object.Identity;
        import sailpoint.tools.Util;
        
        Identity identityObject = context.getObject(Identity.class,identityName);
        String userStatus =null;
        if(identityObject!=null){
          if(identityObject.getAttribute("status")!=null){
              userStatus=identityObject.getAttribute("status");
            }	
        }
        if(Util.isNotNullOrEmpty(userStatus)){
           return userStatus;
        }
        return null;		
		
		]]></Source>
    </Script>
  </Variable>
  
  <Variable name="managerEmail">
    <Description>Manager Email</Description>
    <Script>
      <Source><![CDATA[
		
		import sailpoint.object.Identity;
		Identity identityObject = context.getObject(Identity.class,identityName);
		if(identityObject!=null){
			Identity managerIdentity = identityObject.getManager();
			if(managerIdentity!=null){
				return managerIdentity.getEmail();
			}
		}
		return null;
		
		]]></Source>
    </Script>
  </Variable>
  <Variable name="managerName">
    <Description>Manager Name</Description>
    <Script>
      <Source><![CDATA[
		
        import sailpoint.object.Identity;
        Identity identityObject = context.getObject(Identity.class,identityName);
        if(identityObject!=null){
          Identity managerIdentity = identityObject.getManager();
          if(managerIdentity!=null){
            return managerIdentity.getName();
          }
        }
        return null;
		
		]]></Source>
    </Script>
  </Variable>
  <Variable name="employeeId">
    <Description>Employee Id of Identity</Description>
    <Script>
      <Source><![CDATA[
		
		import sailpoint.object.Identity;
		import sailpoint.tools.Util;
		Identity identityObject = context.getObject(Identity.class,identityName);
		String employeeId=null;
		if(identityObject!=null){
			if(identityObject.getAttribute("employeeId")!=null){
					employeeId=identityObject.getAttribute("employeeId");
		    }	
		}
		if(Util.isNotNullOrEmpty(employeeId)){
		   return employeeId;
		}
		return null;
		
		]]></Source>
    </Script>
  </Variable>
  <Variable name="userType">
    <Description>UserType of Identity</Description>
    <Script>
      <Source><![CDATA[
		
		import sailpoint.object.Identity;
		import sailpoint.tools.Util;
		Identity identityObject = context.getObject(Identity.class,identityName);
		String userType=null;
		if(identityObject!=null){
			if(identityObject.getAttribute("assignmentType")!=null){
					userType=identityObject.getAttribute("assignmentType");
		    }	
		}
		if(Util.isNotNullOrEmpty(userType)){
		   return userType;
		}
		return null;
		
		]]></Source>
    </Script>
  </Variable>
  <Variable initializer="New Account Creation" input="true" name="managerEmailTemplate">
    <Description>
     The email template to use for manager notification.
  </Description>
  </Variable>
  <Variable name="adAppName">
    <Script>
      <Source><![CDATA[
  		
  			import sailpoint.object.Custom;
  			
  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
  			String appName = null;
  			if(custom != null){
  				appName = custom.getString("adApplication");
  			}
  			return appName;
  		
  		]]></Source>
    </Script>
  </Variable>
  <Variable name="adLinkExist" output="true" type="boolean"/>
  <Variable name="isUserActive" output="true" type="boolean"/>
  <Variable name="validationErrors" type="java.util.List"/>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="CMH-AD-Generic-Rulelibrary"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="54" posY="124">
    <Script>
      <Source><![CDATA[
  		
  			import org.apache.log4j.Logger;
  			
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Joiner");
  			if(isDebugEnabled){
  				log.debug("Starting the CMH-LifecycleEvent-Joiner Workflow for the user "+identityName);
  			}
  		
  		]]></Source>
    </Script>
    <Transition to="Validate Data"/>
  </Step>
  <Step icon="Analysis" name="Validate Data" posX="185" posY="125" resultVariable="validationErrors">
    <Script>
      <Source><![CDATA[
			  
            import org.apache.log4j.Logger;
  			import sailpoint.tools.Util;
  			
  			Logger log = Logger.getLogger("CMH-LifecycleEvent-Joiner");
  			
  			List errorList = new ArrayList();
  			if(Util.isNullOrEmpty(adAppName)) {
  			   errorList.add("The Custom Object is not configured properly with AD app name.Either Custom object or AD" +
  			   "application name in custom object is missing");
  			}
  			
  			if(Util.isNullOrEmpty(managerName)) {
  			    errorList.add("User Manager cannot be null");
  			}
  			
  			if(Util.isNullOrEmpty(managerEmail)) {
  			    errorList.add("User manager must have email , Manager mail cannot be null");
  			}
  			if(!Util.isEmpty(errorList)) {
  			  log.error("CMH-LifecycleEvent-Joiner: Errors Found :"+Util.listToCsv(errorList));
  			}else if(isDebugEnabled){
  				log.debug("CMH-LifecycleEvent-Joiner: Validation Successful");
  			}
  			return errorList;
			  
      ]]></Source>
    </Script>
    <Transition to="Check User Status">
      <Script>
        <Source><![CDATA[
  			  
  				import sailpoint.tools.Util;
  				if(Util.isEmpty(validationErrors)){
					return true;
				}
				return false;
  			   
  			]]></Source>
      </Script>
    </Transition>
    <Transition to="end"/>
  </Step>
  <Step icon="Default" name="Check User Status" posX="252" posY="237" resultVariable="isUserActive">
    <Arg name="userStatus" value="ref:userStatus"/>
    <Script>
      <Source><![CDATA[
              import org.apache.commons.lang.StringUtils;
               if(!StringUtils.isBlank(userStatus) && StringUtils.equalsIgnoreCase(userStatus,"Active")) {
						    isUserActive = true;
						 }else {
						    isUserActive = false; 
						 }
              return isUserActive; 
            ]]></Source>
    </Script>
    <Transition to="Check AD Application" when="return (isUserActive==true)"/>
    <Transition to="end" when="return (isUserActive==false)"/>
  </Step>
  <Step icon="Default" name="Check AD Application" posX="319" posY="326">
    <Script>
      <Source><![CDATA[
			  
                import sailpoint.api.IdentityService;
                import sailpoint.object.Application;
                import sailpoint.object.Identity;
                import sailpoint.object.Link;
                import sailpoint.tools.GeneralException;
                
				Logger log = Logger.getLogger("cmh.authsource.rules");
                Identity identity = context.getObjectByName(Identity.class, identityName);
                Application app = null;
                try {
                      app = context.getObjectByName(Application.class, adAppName);
                    } catch (GeneralException e) {
                    log.error(e.getMessage());
                    }
                if (null != app && null != identity) {
                    IdentityService ids = new IdentityService(context);
                    try {
                         List links = ids.getLinks(identity, app);
                         if (null != links && !links.isEmpty()) {
                             adLinkExist = true;
                         } else {
                            adLinkExist = false;
                         }
                       } catch (GeneralException e) {
                       log.error(e.getMessage());
                    }
                 } else {
                      log.error("Application is not found or Identity is null");
                 }
                 wfcontext.getWorkflowCase().put("adLinkExist",adLinkExist);
			  
      ]]></Source>
    </Script>
    <Transition to="Increase Retry Count" when="return ((adLinkExist==false) &amp;&amp; retries &lt; 3)"/>
    <Transition to="end" when="return ((adLinkExist==false) &amp;&amp; retries &gt;= 3)"/>
    <Transition to="Notify Manager" when="return (adLinkExist==true)"/>
  </Step>
  <Step icon="Default" name="Increase Retry Count" posX="479" posY="430" wait="1">
    <Script>
      <Source><![CDATA[
		
			retries++;
			wfcontext.getWorkflowCase().put("retries",retries);
		
		]]></Source>
    </Script>
    <Transition to="Wait for next Retry"/>
  </Step>
  <Step icon="Undo" name="Wait for next Retry" posX="320" posY="431" wait="ref:retryTime">
    <Transition to="Check AD Application"/>
  </Step>
  <Step icon="Task" name="o365 Provisioning Plan" posX="52" posY="20" resultVariable="plan">
    <Description>Process the user who has been provsioned to AD</Description>
    <Script>
      <Source><![CDATA[  
	  
        //o365 yet to be implemented
       		 
      ]]></Source>
    </Script>
    <Transition to="Compile Project"/>
  </Step>
  <Step action="call:compileProvisioningProject" name="Compile Project" posX="172" posY="20" resultVariable="project">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="requester" value="string:spadmin"/>
    <Arg name="source" value="string:UI"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="requireCreateTemplates" value="string:false"/>
    <Arg name="noApplicationTemplates" value="string:true"/>
    <Description>Compile the provisioning plan into a provisioning project.  
                 If you need to pass in provisioner options like "noFiltering"  
                 or "noRoleDeprovisioning" you must pass them as explicit  
                 arguments to the call.  
                 The evaluation options "requester" and "source" are commonly  
                 set here.               
                 You can also pass things into the Template and Field scripts by  
                 defining Args in this step.
	</Description>
    <Transition to="Create Identity Request"/>
  </Step>
  <Step action="call:createIdentityRequest" icon="Task" name="Create Identity Request" posX="295" posY="19">
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="priority" value="string:Normal"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="flow" value="ref:flow"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:provisionProject" icon="Provision" name="Provision" posX="427" posY="19">
    <Arg name="background" value="false"/>
    <Arg name="project" value="ref:project"/>
    <Transition to="Complete Identity Request"/>
  </Step>
  <Step action="call:completeIdentityRequest" icon="Task" name="Complete Identity Request" posX="536" posY="18" resultVariable="identityRequest">
    <Arg name="project" value="ref:project"/>
    <Arg name="autoVerify" value="false"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Transition to="Notify Manager"/>
  </Step>
  <Step action="call:sendEmail" condition="script:managerEmail!=null" icon="Email" name="Notify Manager" posX="636" posY="317">
    <Arg name="to" value="ref:managerEmail"/>
    <Arg name="template" value="ref:managerEmailTemplate"/>
    <Arg name="managername" value="ref:managerName"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userName" value="ref:identityName"/>
    <Arg name="employeeId" value="ref:employeeId"/>
    <Arg name="userType" value="ref:userType"/>
    <Description>Send Email to Manager</Description>
    <Transition to="Refresh Identity"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Refresh Identity" posX="788" posY="316">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="correlateEntitlements" value="true"/>
    <Arg name="refreshRoleMetadata" value="true"/>
    <Arg name="refreshIdentityEntitlements" value="true"/>
   <Transition to="end"/>
  </Step>
  <Step catches="complete" icon="Catches" name="Check Status" posX="656" posY="22">
    <Arg name="attributeName" value="string:Employee ID"/>
    <Arg name="source" value="string:CMH-LifecycleEvent-Joiner"/>
    <Arg name="attributeValue" value="ref:employeeId"/>
    <Arg name="target" value="ref:identityName"/>
    <Script>
      <Source><![CDATA[
		
	        import sailpoint.tools.Message;
			import sailpoint.tools.Util;
			import java.util.ArrayList;
			import org.apache.log4j.Logger;
			
			Logger log = Logger.getLogger("CMH-LifecycleEvent-Joiner");
			if(validationErrors==null){
				validationErrors = new ArrayList();
			}
			if(adLinkExist == false){
			   validationErrors.add("AD Link does exists");
			}
			if(wfcontext.getRootWorkflowCase().getMessages() != null && null != wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)){
				log.error("CMH-LifecycleEvent-Joiner: Error occured in leaver process: "+wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error));
				List errorMessagesList = wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error);
				String errorMessagesFromWfc = Util.listToCsv(errorMessagesList);
				validationErrors.add(errorMessagesFromWfc);
			}
			if(isDebugEnabled){
				log.debug("CMH-LifecycleEvent-Joiner : Errors recorded in Leaver process: "+validationErrors.toString());
			}
			if(Util.isEmpty(validationErrors) && adLinkExist == true){
			    Map map = new HashMap();
			    map.put("setString1","Joiner is successfully completed" );
  				auditWrite("Joiner Success",source,target,attributeName,attributeValue,map);
				
  			}else{
  			    Map map = new HashMap();
  			    map.put("setString1","Joiner Process failed due to errors");
  				map.put("setString2",Util.listToCsv(validationErrors));
		  		auditWrite("Joiner Failure",source,target,attributeName,attributeValue,map);
  			}
  			
  			
  			if(isDebugEnabled){
  			    log.debug("CMH-LifecycleEvent-Joiner: Check Status step : Audit Event Generated");
  			    log.debug("Ending the CMH-LifecycleEvent-Joiner Workflow for the user "+identityName);
  			}
		
		]]></Source>
    </Script>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end" posX="875" posY="199"/>
</Workflow>
