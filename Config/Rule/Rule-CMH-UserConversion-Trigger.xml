<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="CMH-User-Conversion-Trigger-Rule" type="IdentityTrigger">
  <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.
  
  This rule is used to trigger the User conversion workflow when there is a new user with same name(as existing user in IIQ) and otherEmpId is being set to the user in IIQ</Description>
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule" name="CMH-AD-Generic-Rulelibrary"/>
  </ReferencedRules>
    <Signature returnType="boolean">
        <Inputs>
            <Argument name="log">
                <Description>
                    The log object associated with the SailPointContext.
                </Description>
            </Argument>
            <Argument name="context">
                <Description>
                    A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
                </Description>
            </Argument>
            <Argument name="previousIdentity">
                <Description>
                    The identity before the refresh/aggregation (this will be null when an
                    identity is created).
                </Description>
            </Argument>
            <Argument name="newIdentity">
                <Description>
                    The identity after the refresh/aggregation (this will be null when an
                    identity is deleted).
                </Description>
            </Argument>
        </Inputs>
        <Returns>
            <Argument name="result">
                <Description>
                    A boolean describing the result of the rule.
                </Description>
            </Argument>
        </Returns>
    </Signature>
    <Source>
    <![CDATA[
    import java.text.ParseException;
    import java.text.SimpleDateFormat;
    import sailpoint.object.Identity;
    import sailpoint.tools.Util;

    Logger log = Logger.getLogger("Rule.CMH-User-Conversion-Trigger-Rule");
    log.debug("Entering CMH-User-Conversion-Trigger-Rule for identity "+newIdentity!=null?newIdentity.getName():"");
	boolean triggerConversion = false;
    String format = getCustomObject("conversionTimestamp", "CMH-DateFormat");
    if (Util.isNotNullOrEmpty(format)) {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        if (newIdentity != null) {
            String oldEmpId = newIdentity.getStringAttribute("otherEmpId");
            if (Util.isNotNullOrEmpty(oldEmpId)) {
                if (isConversionCase(oldEmpId)) {
                    String userStatus = newIdentity.getStringAttribute("status");
                    String isConversionProcessed = newIdentity.getStringAttribute("isConversionProcessed");
                    if (!Util.nullSafeCaseInsensitiveEq(isConversionProcessed, "YES")) {
                        if (Util.nullSafeCaseInsensitiveEq(userStatus, "ACTIVE")) {
                            triggerConversion = true;
                        } else if (Util.nullSafeCaseInsensitiveEq(userStatus, "PREHIRE")) {
                            //String startDate = newIdentity.getStringAttribute("startDate");
							Date startDate = newIdentity.getStringAttribute("startDate");
                            try {
                                if (startDate!=null) {
                                    //Date stDate = sdf.parse(startDate);
                                    Date currDate = new Date();
                                    int daysDiff = Util.getDaysDifference(startDate, currDate);
                                    if (daysDiff > 0 && daysDiff <= 30) {
                                        triggerConversion = true;
                                    }
                                }
                            } catch (ParseException ex) {
                                log.error("Error while parsing the date in CMH-User-Conversion-Trigger-Rule");
                            }
                        }
                    }
                }
            }
        }
    }
	log.debug("Exiting CMH-User-Conversion-Trigger-Rule: Proceed with Conversion?"+triggerConversion);
    return triggerConversion;
    ]]>
    </Source>
</Rule>
