<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="CMH-AD-Generic-Rulelibrary">
<Description>This rule contains utility methods which are used by most of the workflows (like Joiner, Leaver, Rehire, Conversion) and rules. The key logics covered in this rule are like username generation, username validation, service-now ticket generation, AD single account aggregation and etc.</Description>
    <Source><![CDATA[
	import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import sailpoint.api.Aggregator;
import sailpoint.api.ObjectUtil;
import sailpoint.connector.Connector;
import sailpoint.object.Application;
import sailpoint.object.Attributes;
import sailpoint.object.AuditEvent;
import sailpoint.object.Custom;
import sailpoint.object.Filter;
import sailpoint.object.Identity;
import sailpoint.object.Link;
import sailpoint.object.QueryOptions;
import sailpoint.object.ResourceObject;
import sailpoint.object.TaskResult;
import sailpoint.server.Auditor;
import sailpoint.tools.GeneralException;
import sailpoint.tools.Util;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.http.HttpEntity;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import sailpoint.integration.JsonUtil;

Logger log = Logger.getLogger("Rule.CMH-AD-Generic-Rulelibrary");

/**
				* Generate primary group DN.
				* Description: This method generates primary group DN
				* @param userType
				* @return string
				*/
public String generatePrimaryGroupDN(String userType) {
	log.debug("Entering generatePrimaryGroupDN method");
	String finalDn = null;
	if (Util.isNotNullOrEmpty(userType)) {
		finalDn = getCustomObject(userType.toUpperCase(), "CMH-User-OU-Mapping-Custom-Object");
	}
	log.debug("Exiting generatePrimaryGroupDN method");
	return finalDn;
}

/**
				 * Generate account DN.
				 * Description: This method generates account DN
				 * @param username
				 * @param userType
				 * @return string
				 */

public String generateAccountDN(String username, String userType) {
	log.debug("Entering generateAccountDN method");
	String finalCn = null;
	if (Util.isNotNullOrEmpty(userType) && Util.isNotNullOrEmpty(username)) {
		String userOU = getCustomObject(userType.toUpperCase(), "CMH-User-OU-Mapping-Custom-Object");
		if (Util.isNotNullOrEmpty(userOU)) {
			finalCn = "cn=" + username + "," + userOU;
		}
	}
	log.debug("Exiting generateAccountDN method");
	return finalCn;
}

/**
				 * Gets the custom object.
				 * Description: This method reads value from custom object
				 * @param customObjectName
				 * @param customName
				 * @return string
				 */

public String getCustomObject(String customAttrName, String customObjectName) {
	log.debug("Entering getCustomObject method");
	String customAttrValue = null;
	if (Util.isNotNullOrEmpty(customAttrName) && Util.isNotNullOrEmpty(customObjectName)) {
		Custom custom = null;
		try {
			custom = context.getObject(Custom.class, customObjectName);
		} catch(GeneralException e) {
			log.error("Error occured while retrieving cusotm object: " + e.getMessage());
		}
		if (null != custom) {
			customAttrValue = custom.get(customAttrName);
		}
	}
	log.debug("Exiting getCustomObject method");
	return customAttrValue;
}

/**
				 * Generate user password.
				 * Description: this method generates user password based on user attributes
				 * @param firstName
				 * @param lastName
				 * @param dob the dateofbirth
				 * @param employeeId
				 * @return char[]
				 */

public char[] generateUserPassword(String firstName, String lastName, String dob, String employeeId) {
	log.debug("Entering generateUserPassword method");
	char[] userPassword = null;
	if (Util.isNotNullOrEmpty(firstName)) {
		firstName = firstName.toLowerCase();
	}
	if (Util.isNotNullOrEmpty(lastName)) {
		lastName = lastName.toLowerCase();
	}
	if (Util.isNotNullOrEmpty(dob)) {
		if (dob.contains("-")) {
			String[] parts = dob.split("-");
			String splitDOB = null;
			if (Util.isNotNullOrEmpty(parts[0])) {
				splitDOB = parts[0];
			}
			if (Util.isNotNullOrEmpty(splitDOB) && Util.isNotNullOrEmpty(parts[1])) {
				splitDOB = splitDOB.concat(parts[1]);
			}
			if (Util.isNotNullOrEmpty(splitDOB)) {
				String substr = null;
				if (employeeId.length() > 4) {
					substr = employeeId.substring(employeeId.length() - 4);
				} else {
					substr = employeeId;
				}
				userPassword = (firstName.substring(0, 1).concat(lastName.substring(0, 1)).concat(splitDOB).concat(substr)).toCharArray();
			}
		}
	}

	log.debug("Exiting generateUserPassword method");
	return userPassword;
}

/**
				 * Check length.
				 * Description: this method checks the length of username
				 * @param username
				 * @return true/false
				 */

public boolean checkLength(String username) {
	log.debug("Entering checkLength method");
	boolean isValid = true;
	if (username.length() > 20) {
		isValid = false;
	} 
	log.debug("Exiting checkLength method");
	return isValid;
}

/**
				 * Check unique.
				 * Description: this method checks the uniqueness of username generated in IIQ
				 * @param username
				 * @param firstName
				 * @param lastName
				 * @param middInitial
				 * @param empId
				 * @return int
				 */

public int checkUnique(String username, String lastName, String empId) {
	log.debug("Entering checkUnique method");
	int count = 0;
	List userList = null;
	Filter lNameFilter = Filter.eq("lastname", lastName);
	Filter uNameFilter = Filter.like("name", username, Filter.MatchMode.START);
	Filter oldUserFilter = Filter.like("name", "_old", Filter.MatchMode.ANYWHERE);
	Filter empIdFilter = Filter.eq("employeeId", empId);
	Filter finalFilter = null;
	finalFilter = Filter.and(lNameFilter, uNameFilter, Filter.not(oldUserFilter), Filter.not(empIdFilter));
	QueryOptions qOps = new QueryOptions();
	qOps.add(finalFilter);
	Iterator itr = null;
	try {
		itr = context.search(Identity.class, qOps);
	} catch(GeneralException e) {
		log.error("Error Occured in checkUnique method "+e.getMessage());
	}
	if (!Util.isEmpty(itr)) {
		userList = new ArrayList();
		while (itr.hasNext()) {
			Identity identity = (Identity) itr.next();
			if (identity != null) {
				userList.add(identity.getName());
			}
		}
		if (!Util.isEmpty(userList)) {
			List numberList = new ArrayList();
			Pattern p = Pattern.compile("-?\\d+");
			for (int i = 0; i < userList.size(); i++) {
				Matcher matcher = p.matcher((String) userList.get(i));
				if (matcher.find()) {
					String number = matcher.group();
					numberList.add(number);
				} else {
					count = 1;
				}
			}
			if (!Util.isEmpty(numberList)) {
				Collections.sort(numberList, Collections.reverseOrder());
				count = Integer.parseInt((String) numberList.get(0)) + 1;
			}
		}
	}
	log.debug("Exiting checkUnique method");
	return count;
}

/**
				 * User name concat.
				 * Description: this method appends the username with count
				 * @param username the username
				 * @param count the count
				 * @return the string
				 */

public String userNameConcat(String username, int count) {
	log.debug("Entering userNameConcat method");
	String userName = username.concat(Integer.toString(count));
	log.debug("Exiting userNameConcat method");
	return userName;
}

/**
				 * Generate time stamp.
				 * Description: this method is used to generate timestamp
				 * @return string
				 */

public String generateTimeStamp() {
	log.debug("Entering generateTimeStamp method");
	String strDate = null;
	String format = getCustomObject("renameUserTimestamp", "CMH-DateFormat");
	if (Util.isNotNullOrEmpty(format)) {
		SimpleDateFormat formatter = new SimpleDateFormat(format);
		Date date = new Date();
		strDate = formatter.format(date);
	}
	log.debug("Exiting generateTimeStamp method");
	return strDate;
}

/**
				 * User name generator.
				 * Description: this method generates username based on user attributes
				 * @param firstName
				 * @param lastName
				 * @param middInitial
				 * @param empId
				 * @return string
				 */

public String userNameGenerator(String firstName, String lastName, String middInitial, String empId) {
	log.debug("Entering userNameGenerator method");
	String uname = null;
	String temp = null;
	String finalUsername = null;
	String filteredFname = filterSpecialCharacter(firstName);
	String filteredLname = filterSpecialCharacter(lastName);
			String filteredMiddleName = null;
			if (Util.isNotNullOrEmpty(middInitial)) {
				filteredMiddleName = filterSpecialCharacter(middInitial);
		    }
			if(Util.isNotNullOrEmpty(filteredFname) && Util.isNotNullOrEmpty(filteredLname)) {
			   if(Util.isNotNullOrEmpty(filteredMiddleName)) {
					   temp = filteredFname.substring(0, 1).concat(filteredMiddleName).concat(filteredLname);
				}
			    else {
			temp = filteredFname.substring(0, 1).concat(filteredLname); // SMitra
		}
	}
	if (Util.isNotNullOrEmpty(temp) && temp.length() > 17) {
		uname = temp.substring(0, 17);
	} else {
		uname = temp;
	}
	if (Util.isNotNullOrEmpty(uname)) {
		int count = 0;
		count = checkUnique(uname, lastName, empId);
		if (count > 0) {
			temp = userNameConcat(uname, count);
			uname = temp;
		}
		finalUsername = userNameCreationValidationCheck(uname, lastName, empId);
	}
	log.debug("Exiting userNameGenerator method");
	return finalUsername;
}

/**
				 * User name creation validation check.
				 * Descripton: Checking whether the generated user has length >17 and is not unique
				 * Descripton: Trimming the username to 17 and generating new username by appdening digits
				 * @param username
				 * @param firstName
				 * @param lastName
				 * @param middInitial
				 * @param empId
				 * @return string
				 */

public String userNameCreationValidationCheck(String username, String lastName, String empId) {
	log.debug("Entering userNameCreationValidationCheck method");
	String uname = username;
	String temp = null;
	String finalUsername = null;
	Pattern pattern = Pattern.compile("-?\\d+");
	boolean isValid = checkLength(uname);
	int count = 0;
	if (!isValid) {
		do {
			//Matcher to get number from generated username and calcuting the size of that digit
			Matcher matcher = pattern.matcher(uname);
			if (matcher.find()) {
				String number = matcher.group();
				int size = 0;
				if (Util.isNotNullOrEmpty(number)) {
					size = number.length();
				}
				int counter = size + size;
				temp = uname.substring(0, uname.length() - counter);
				uname = temp;

			} else { // if substring does not have any digit and is of 17 characters
				temp = uname.substring(0, 17);

			}

		} while (!checkLength(uname));
		count = checkUnique(uname, lastName, empId);
		if (count > 0) {
			count++;
			temp = userNameConcat(uname, count);
			uname = temp;
		}
		finalUsername = uname;
	} else {
		finalUsername = uname;
	}
	log.debug("Exiting userNameCreationValidationCheck method");
	return finalUsername;
}

/**
				 * Check username in cerner/infor.
				 * Description: this method validates username against custom object
				 * @param username
				 * @param customName
				 * @return true
				 */
public boolean checkUsernameInCustomObject(String username, String customName) {
	log.debug("Entering checkUsernameInCustomObject method");
	boolean userNameExists = false;
	Custom custom = null;
	try {
		custom = context.getObject(Custom.class, customName);
	} catch(GeneralException e) {
		log.error("Error checking cerner username in custom object : " + e.getMessage());
	}
	if (custom != null) {
		List arr = custom.getList("USERNAMES");
		if (!Util.isEmpty(arr)) {
			if (arr.contains(username)) {
				userNameExists = true;
			}
		}
	}
	log.debug("Exiting checkUsernameInCustomObject method");
	return userNameExists;
}

/**
				 * Final user name.
				 * Description: this method increments the username if username is present cerner or infor list and generated final username
				 * @param username
				 * @param firstname
				 * @param lastname
				 * @param middleInitial
				 * @param empId
				 * @return string
				 */

public String finalUserName(String username, String firstname, String lastname, String middleInitial, String empId) {
	log.debug("Entering finalUserName method");
	String uname = null;
	if (Util.isNotNullOrEmpty(username)) {
		uname = username;
		String temp = null;
		boolean cernerFlag = checkUsernameInCustomObject(uname, "CMH-Cerner-Usernames");
		boolean inforFlag = checkUsernameInCustomObject(uname, "CMH-Infor-Usernames");
		if (cernerFlag || inforFlag) {
			do {
				Pattern pattern = Pattern.compile("-?\\d+");
				Matcher matcher = pattern.matcher(uname);
				if (matcher.find()) {
					String number = matcher.group();
					if (Util.isNotNullOrEmpty(number)) {
						int size = number.length();
						temp = uname.substring(0, uname.length() - size);
						int count = Integer.parseInt(number);
						count++;
						uname = temp.concat(Integer.toString(count));
					}
				} else {
					temp = uname + 1;
					uname = temp;
				}
				userNameCreationValidationCheck(uname, lastname, empId);
			} while ( checkUsernameInCustomObject ( uname , "CMH-Cerner-Usernames") || checkUsernameInCustomObject(uname, "CMH-Infor-Usernames"));
		}

	}
	log.debug("Exiting finalUserName method");
	return uname;
}

/**
				 * Audit write.
				 * Description: this method is used for audit event generation
				 * @param action
				 * @param source
				 * @param target
				 * @param attributeName
				 * @param attributeValue
				 * @param map
				 */

public void auditWrite(String action, String source, String target, String attributeName, String attributeValue, Map map) {
	log.debug("Entering auditWrite method");
	if (!StringUtils.isBlank(action) && !StringUtils.isBlank(source) && !StringUtils.isBlank(target) && !StringUtils.isBlank(attributeName) && null != map) {

		AuditEvent event = new AuditEvent();
		event.setAction(action);
		event.setCreated(new Date());
		event.setSource(source);
		event.setTarget(target);
		event.setAttributeName(attributeName);
		event.setAttributeValue(attributeValue);
		if (null != map) {
			for (String entry: map.keySet()) {
				if (Util.nullSafeCaseInsensitiveEq(entry, "setString1") && null != map.get("setString1")) {
					event.setString1((String) map.get("setString1"));
				} else if (Util.nullSafeCaseInsensitiveEq(entry, "setString2") && null != map.get("setString2")) {
					event.setString2((String) map.get("setString2"));
				} else if (Util.nullSafeCaseInsensitiveEq(entry, "setString3") && null != map.get("setString3")) {
					event.setString3((String) map.get("setString3"));
				} else if (Util.nullSafeCaseInsensitiveEq(entry, "setString4") && null != map.get("setString4")) {
					event.setString4((String) map.get("setString4"));
				}
			}
		}
		Auditor.log(event);
		context.commitTransaction();
		log.debug("Audit event is generated successfully");
	} else {
		log.error("One of the required attribute is null [action,source,target,attributeName,attributeValue, setStringMap]");
	}
	log.debug("Exiting auditWrite method");
}

/**
				 * Gets the apps to process.
				 * Description: this method returns list of application to be processed
				 * @param identityName
				 * @param customName the key word
				 * @return list
				 */
public List getAppsToProcess(String identityName, String customName, String keyWord) {
	log.debug("Entering getAppsToProcess method");
	Identity iden = context.getObjectByName(Identity.class, identityName);
	Custom custom = context.getObjectByName(Custom.class, customName);
	List appsToDelete = new ArrayList();
	if (iden != null && custom != null) {
		List customAppsList = custom.getList(keyWord);
		if (customAppsList != null) {
			List idLinks = iden.getLinks();
			if (idLinks != null && idLinks.size() > 0) {
				for (Link li: idLinks) {
					if (li != null) {
						String appName = li.getApplicationName();
						if (!StringUtils.isBlank(appName) && customAppsList.contains(appName)) {
							appsToDelete.add(appName);
						}
					}
				}
			}
		}
	}
	log.debug("Exiting getAppsToProcess method");
	return appsToDelete;
}

/**
				 * Set Header.
				 * Description: this method used for setting headers in HTTPPOST
				 * @param endPointURL
				 * @param encoding
				 * @return  HttpPost
				 */

private HttpPost setHeader(String endPointURL, String encoding) {
	log.debug("Entering setHeader method");
	HttpPost httpAddCartPost = null;
	if (Util.isNotNullOrEmpty(endPointURL) && Util.isNotNullOrEmpty(encoding)) {
		httpAddCartPost = new HttpPost(endPointURL);
		httpAddCartPost.setHeader("Accept", "application/json");
		httpAddCartPost.setHeader("Content-Type", "application/json");
		httpAddCartPost.setHeader("Authorization", "Basic " + encoding);
	}
	log.debug("Exiting setHeader method");
	return httpAddCartPost;

}
/**
				 * Response Map.
				 * Description: this method used for execute httpPost request and returns response
				 * @param httpclient
				 * @param httpPostRequest
				 * @return map
				 */
private Map responseMap(CloseableHttpClient httpclient, HttpPost httpPostRequest) {
	log.debug("Entering responseMap method");
	String responseValidate = null;
	CloseableHttpResponse response = null;
	Map map = null;
	try {
		if (null != httpclient && null != httpPostRequest) {
			response = httpclient.execute(httpPostRequest);
			if (null != response) {
				responseValidate = response.getStatusLine().toString();
				String responseBody = EntityUtils.toString(response.getEntity());
				if (Util.isNotNullOrEmpty(responseValidate) && Util.isNotNullOrEmpty(responseBody)) {
					map = new HashMap();
					map.put("responseValidate", responseValidate);
					map.put("responseBody", responseBody);
				}
			}
		} else {
			log.error("responseMap :Client or Post request is empty");
		}
	} catch(Exception e) {
		log.error("responseMap Error: " + e.getMessage());
	} finally {
		try {
			response.close();
		} catch(IOException e) {
			log.error("responseMap Error: " + e.getMessage());
		}
	}
	log.debug("Exiting responseMap method");
	return map;
}

/**
				 * Generate snow ticket.
				 * Description: this method used for service now ticket generation using catalog items
				 * @param identityName the identity name
				 * @param customName the custom name				 
				 * @param operation the operation
				 * @return  string
				 */

public Object generateSnowTicket(String identityName, String customName, String operation) {
	log.debug("Entering generateSnowTicket method for identity:"+identityName);
	String ticketNo = null;
	List errorList = new ArrayList();
	if (Util.isNotNullOrEmpty(identityName) && Util.isNotNullOrEmpty(operation) && Util.isNotNullOrEmpty(customName)) {
		String addCart = null;
		String checkoutCart = null;

		if (operation.equalsIgnoreCase("Disable")) {
			addCart = "addCartDisable";
			checkoutCart = "checkoutCartDisable";
		} else if (operation.equalsIgnoreCase("Delete")) {
			addCart = "addCartDelete";
			checkoutCart = "checkoutCartDelete";
		}
		CredentialsProvider credsProvider = new BasicCredentialsProvider();
		CloseableHttpClient httpclient = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();
		Map jsonMap = new HashMap();
		jsonMap.put("sysparm_quantity", "1");
		Map varMap = new HashMap();
		varMap.put("color", "Black");
		varMap.put("storage", "64GB");
		varMap.put("var_tsk_short_desc", "short_description---value");
		//varMap.put("username", "kdhyani"); //put username
		//varMap.put("description", "User "+operation);
		jsonMap.put("variables", varMap);
		JsonUtil jUtil = new JsonUtil();
		String jsonString = jUtil.render(jsonMap);
		try {
			Custom serviceNowRestAPIUrlObject = context.getObjectByName(Custom.class, customName);
			if (null != serviceNowRestAPIUrlObject) {
				String username = serviceNowRestAPIUrlObject.getString("serviceNowUserName");
				String encryptedPassword = serviceNowRestAPIUrlObject.getString("serviceNowUserPassword");
				String userCredentials = username + ":" + context.decrypt(encryptedPassword);

				Base64 b = new Base64();
				String encoding = b.encodeAsString(new String(userCredentials).getBytes());
				String addCartURL = serviceNowRestAPIUrlObject.getString(addCart);
				String checkoutCartURL = serviceNowRestAPIUrlObject.get(checkoutCart);

				HttpPost httpAddCartPost = setHeader(addCartURL, encoding);
				HttpEntity entity = new ByteArrayEntity(jsonString.getBytes("utf-8"));
				httpAddCartPost.setEntity(entity);

				Map cartResponseMap = responseMap(httpclient, httpAddCartPost);
				if (!Util.isEmpty(cartResponseMap)) {
					String responseValidateAddCart = cartResponseMap.get("responseValidate");
					if (Util.isNotNullOrEmpty(responseValidateAddCart) && responseValidateAddCart.contentEquals("HTTP/1.1 200 OK")) {
						TimeUnit.SECONDS.sleep(5);

						HttpPost httpCheckOutPost = setHeader(checkoutCartURL, encoding);

						Map checkoutResMap = responseMap(httpclient, httpCheckOutPost);
						if (!Util.isEmpty(checkoutResMap)) {
							String responseValidateCheckOutPost = checkoutResMap.get("responseValidate");
							if (Util.isNotNullOrEmpty(responseValidateCheckOutPost) && responseValidateCheckOutPost.contentEquals("HTTP/1.1 200 OK")) {
								String responseBody = checkoutResMap.get("responseBody");
								if (Util.isNotNullOrEmpty(responseBody)) {
									Map responseMap = (Map) jUtil.parse(responseBody);
									if (null != responseMap) {
										Map resultMap = (Map) responseMap.get("result");
										if (null != resultMap) {
											ticketNo = resultMap.get("request_number");
											if (Util.isNotNullOrEmpty(ticketNo)) {
												return ticketNo;
											}
										}
									}
								}
							} else {
								errorList.add("Error:ServiceNow-Checkout is not successfull: " + responseValidateCheckOutPost);
							}
						} else {
							errorList.add("Error:ServiceNow-Checkout respose is map is NULL or empty");
						}
					} else {
						errorList.add("Error:ServiceNow-No request is created: " + responseValidateAddCart);
					}
				} else {
					errorList.add("Error:ServiceNow-Add to cart respose is map is NULL or empty");
				}
			} else {
				errorList.add("Error:ServiceNow-Custom object is NULL or empty");
			}
		} catch(Exception e) {
			log.error("Error in generateSnowTicket method: " + e.getMessage());
			errorList.add("Error:ServiceNow-" + e.getMessage());
		} finally {
			httpclient.close();
		}
	} else {
		errorList.add("identityName or custom object name cannot be cannot be empty");
	}
	log.debug("Exiting generateSnowTicket method");
	return errorList;
}
/**
				 * Do targeted aggregation.
				 * Description: this method performs single account aggregation
				 * @param nativeId
				 * @param appName
				 * @param identityName
				 * @return the list
				 */

public List doTargetedAggregation(String nativeId, String appName, String identityName) {
	Logger log = Logger.getLogger("SingleAccountAggregation");
	log.debug("Entering doTargetedAggregation method for identity: " + identityName);
	Identity identity = null;
	List errorMessages = new ArrayList();
	try {
		identity = context.getObjectByName(Identity.class, identityName);
		Application app = context.getObjectByName(Application.class, appName);
		Connector connector = sailpoint.connector.ConnectorFactory.getConnector(app, null);
		ResourceObject rObj = connector.getObject("account", nativeId, null);
		if (rObj != null) {
			Attributes argMap = new Attributes();
			argMap.put("noOptimizeReaggregation", "true");
			// Construct an aggregator instance.
			Aggregator agg = new Aggregator(context, argMap);
			if (ObjectUtil.isLocked(context, Identity.class, identityName)) {
				ObjectUtil.unlockIdentity(context, identity);
			}
			TaskResult taskResult = agg.aggregate(app, rObj);
			if (taskResult.getErrors() != null && taskResult.getErrors().size() > 0) {
				log.error("Single account Aggregation task failed in doTargetedAggregation method");
			} else {
				log.debug("Single Account Aggregation is completed successfully for User : "+identityName);
			}
		}
		else {
			log.error("Resource Object is null in doTargetedAggregation method");
			errorMessages.add("User object is not found");
		}
	} catch(Exception e) {
		log.error("Exception during targeted aggregation: " + e.getMessage());
		errorMessages.add(e.getMessage());
	}
	log.debug("Exit doTargetedAggregation method");
	return errorMessages;
}

/**
				 * Start date check.
				 * Description: this method checks if startdate is <= 30 days of current day
				 * @param startDate
				 * @return true, if successful
				 */

public boolean startDateCheck(Date startDate) {
	log.debug("Entering startDateCheck method");
	boolean flag = false;
	if (null != startDate) {
		/*Date userStartDate = null;
		try {
			userStartDate = new SimpleDateFormat("MM/dd/yyyy").parse(startDate);
		} catch(ParseException e) {
			log.error("Error in startDateCheck method : " + e.getMessage());
		}*/
		Date currentDate = new Date();
		int days = Util.getDaysDifference(startDate, currentDate);
		if (days <= 30) {
			flag = true;
		} else {
			flag = false;
		}
	}
	log.debug("Exiting startDateCheck method: Start date is within 30 days from now? " + flag);
	return flag;
}
/**
				 * Read From Csv
				 * Description: this method reads usernames from csv and returns the list
				 * @param filepath
				 * @return list
				 */

public List readFromCsv(String filePath) {
	log.debug("Entering readFromCsv method");
	List list = new ArrayList();
	int count = 0;
	int index = 0;
	String line = "";
	String cvsSplitBy = ",";
	String[] cols = null;
	if (Util.isNotNullOrEmpty(filePath) && new File(filePath).exists()) {
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(filePath));
			while ((line = br.readLine()) != null) {
				if (count == 0) {
					cols = line.split(cvsSplitBy);
					for (int i = 0; i < cols.length; i++) {
						if (cols[i].equalsIgnoreCase("USERNAME")) {
							index = i;
							break;
						}
					}
					count++;

				} else {
					cols = line.split(cvsSplitBy);
				}
				list.add(cols[index]);
			}
		} catch(FileNotFoundException e) {
			log.error("FileNotFoundException in readFromCsv method:" + e.getMessage());
		} catch(IOException e) {
			log.error("IOException in readFromCsv method:" + e.getMessage());
		} catch(Exception e) {
			log.error("ERROR in readFromCsv method:" + e.getMessage());
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch(IOException e) {
					log.error("IOException in finally block of readFromCsv method :" + e.getMessage());
				}
			}
		}

	} else {
		throw new sailpoint.tools.GeneralException("ERROR : File is not present on given location or file location is not proper");
	}
	log.debug("Exiting readFromCsv method");
	return list;
}
/**
				 * Write To Custom Object
				 * Description: this method reads list and stores it in custom object
				 * @param unameList
				 * @param customName
				 * @return true, if successfull
				 */
public boolean writeToCustomObject(List unameList, String customName) {
	log.debug("Entering writeToCustomObject method");
	Custom custom = null;
	boolean flag = false;
	if (null != unameList && Util.isNotNullOrEmpty(customName)) {
		try {
			custom = context.getObjectByName(Custom.class, customName);
			if (null != custom) {
				String lock = custom.getLock();
				List list = custom.getAttributes().getList("USERNAMES");
				if (null != list) {
					custom.setLock(lock);
					boolean objRemoved = list.removeAll(list);
					if(objRemoved) {
					   custom.put("USERNAMES", list);
					   custom.put("USERNAMES", unameList);
				    }
					context.saveObject(custom);
					context.commitTransaction();
					custom.remove(lock);
					flag = true;
				}
			} else {
			    log.debug("CMH-AD-Generic-Rulelibrary : writeToCustomObject(): Creating custom Object");
				custom = new Custom();
				custom.setName(customName);
				custom.put("USERNAMES", unameList);
				context.saveObject(custom);
				context.commitTransaction();
				flag = true;
			}
		
		} catch(GeneralException e) {
			log.error("ERROR in writeToCustomObject method: " + e.getMessage());
		}
	}
	log.debug("Exiting writeToCustomObject method");
	return flag;
}

/***Method checks if the user is for the conversion case***/
public boolean isConversionCase(String oldEmpId, String newUserName) {
	log.debug("Entering isConversionCase method");
	boolean isConverted = false;
	if (Util.isNotNullOrEmpty(oldEmpId) && Util.isNotNullOrEmpty(newUserName)) {
		log.debug("Check if the old user is having the name appended with _old "+oldEmpId);
		QueryOptions ops = new QueryOptions();
		Filter filter = Filter.eq("employeeId", oldEmpId);
		ops.addFilter(filter);
		Iterator existingUsers = null;
		try {
			existingUsers = context.search(Identity.class, ops);
			if (existingUsers != null && existingUsers.hasNext()) {
				Identity iden = (Identity) existingUsers.next();
				String uName = iden.getName();
				String status = iden.getStringAttribute("status");
				if (Util.isNotNullOrEmpty(uName) && uName.contains("_old")){
					String oldUserName = uName.substring(0, uName.indexOf("_old")).trim();
					if(Util.nullSafeCaseInsensitiveEq(oldUserName,newUserName) && Util.nullSafeCaseInsensitiveEq(status, "TERMINATED")){ 
						isConverted = true;
					}
				}
			}
		} catch(GeneralException e) {
			log.error("Error occured in isConversionCase method while searching for the user :" +oldEmpId+"  Error: "+ e.getMessage());
		} finally {
			sailpoint.tools.Util.flushIterator(existingUsers);
		}
	}
	log.debug("Exiting isConversionCase method: Is it Conversion Case? " + isConverted);
	return isConverted;
}

/***Method checks if the role for the assignmentType valid or not***/
public boolean isRoleMatching(String assignmentType, String roleName) {
	log.debug("Entering isRoleMatching method");
	boolean roleStatus = false;
	if (Util.isNotNullOrEmpty(assignmentType)) {
		assignmentType = assignmentType.trim();
		if (!Util.nullSafeCaseInsensitiveEq(assignmentType, "Valet")) {
			String userRole = getCustomObject(assignmentType.toUpperCase(), "CMH-User-Role-Mapping-Custom-Object");
			if (Util.nullSafeCaseInsensitiveEq(userRole, roleName)) {
				roleStatus = true;
			}
		}
	} else {
		log.error("assignmentType is NULL in isRoleMatching method");
	}
	log.debug("Exiting isRoleMatching method");
	return roleStatus;
}
/***Method to retrive the homeDirectory path stored in the custom object***/
public String getHomeDirectoryPath() {
	log.debug("Entering getHomeDirectoryPath method");
	String homeDirectoryPath = null;
	Custom custom = context.getObjectByName(Custom.class, "CMH-Custom-Object-AD-Application");
	if (custom != null) {
		homeDirectoryPath = custom.getString("homeDirPath");
	}
	log.debug("Exiting getHomeDirectoryPath method");
	return homeDirectoryPath;
}

/***Method to check if the user required homedirectory***/
public boolean isHomeDirectoryReq(String assignType) {
	log.debug("Entering isHomeDirectoryReq method");
	boolean homeDirReq = false;
	Custom custom = context.getObjectByName(Custom.class, "CMH-Custom-HomeDirectory-UserTypes");
	if (custom != null && custom.get("UserTypes") != null) {
		Map userMap = (Map) custom.get("UserTypes");
		List nMailReqList = (List) userMap.get("NotRequiredMail");
		if (!Util.isEmpty(nMailReqList) && nMailReqList.contains(assignType)) {
			homeDirReq = true;
		} else {
			List mailReqList = custom.getList("RequiredMail");
			if (!Util.isEmpty(mailReqList) && mailReqList.contains(assignType)) {
				homeDirReq = true;
			}
		}
	}
	log.debug("Exiting isHomeDirectoryReq method");
	return homeDirReq;
}

/***Method to retrieve the homeDirectory value***/
public String getHomeDirectory(String identityName) {
	log.debug("Entering getHomeDirectory method");
	String homeDirVal = null;
	if (Util.isNotNullOrEmpty(identityName)) {
		Identity identity = context.getObjectByName(Identity.class, identityName);
		if (identity != null) {
			String assignType = identity.getStringAttribute("assignmentType");
			if (Util.isNotNullOrEmpty(assignType)) {
				String homeDirPath = getHomeDirectoryPath();
				if (Util.isNotNullOrEmpty(homeDirPath)) {
					if (isHomeDirectoryReq(assignType)) {
						homeDirVal = homeDirPath.concat(identityName);
					}
				}
			}
		}
	}
	log.debug("Exiting getHomeDirectory method");
	return homeDirVal;
}

/*** Method to retrieve the displayName for AD***/
public String getDisplayName(String firstName, String lastName, String initial, String credential) {
	log.debug("Entering getDisplayName method");
	String displayName = null;
	String COMMA_SEPARATE = ", ";
	if (Util.isNotNullOrEmpty(firstName) && Util.isNotNullOrEmpty(lastName)) {
		if (Util.isNotNullOrEmpty(initial)) {
			displayName = lastName.concat(COMMA_SEPARATE).concat(firstName).concat(COMMA_SEPARATE).concat(initial);
			if (Util.isNotNullOrEmpty(credential)) {
				displayName = displayName.concat(" ").concat(credential);
			}
		} else {
			displayName = lastName.concat(COMMA_SEPARATE).concat(firstName);
			if (Util.isNotNullOrEmpty(credential)) {
				displayName = displayName.concat(COMMA_SEPARATE).concat(credential);
			}
		}
	}
	log.debug("Exiting getDisplayName method");
	return displayName;
}
/**
				 * Check user Data In Custom Object
				 * Description: this method validates job data against custom object
				 * @param jobdata
				 * @param customName
				 * @param entryKey
				 * @return true
				 */
public boolean checkDataInCustomObject(String jobData, String customName, String entryKey) {
	log.debug("Entering checkDataInCustomObject method");
	boolean isSuccess = false;
	if (Util.isNotNullOrEmpty(jobData) && Util.isNotNullOrEmpty(customName) && Util.isNotNullOrEmpty(entryKey)) {
		Custom custom = null;
		try {
			custom = context.getObject(Custom.class, customName);
		} catch(GeneralException e) {
			log.error("Error in checkDataInCustomObject method : " + e.getMessage());
		}
		if (custom != null) {
			List arr = custom.getList(entryKey);
			if (!Util.isEmpty(arr)) {
				if (arr.contains(jobData)) {
					isSuccess = true;
				}
			}
		}
	}
	log.debug("Exiting checkDataInCustomObject method");
	return isSuccess;
}


/**Method is used to pull the Primary Group DN from the nativeIdentity of the user**/
public String getPrimaryGrpDN(String nativeIdentity) {
	log.debug("Entering getPrimaryGrpDN method");
	String primaryDN = null;
	if (Util.isNotNullOrEmpty(nativeIdentity)) {
		if (nativeIdentity.contains("OU")) {
			primaryDN = nativeIdentity.substring(nativeIdentity.indexOf("OU"));
		}
	}
	log.debug("Exiting getPrimaryGrpDN method");
	return primaryDN;
}

/**Method is used to pull the CN from the nativeIdentity of the user**/
public String calculateCN(String nativeIdentity) {
	log.debug("Entering calculateCN method");
	String cn = null;
	if (Util.isNotNullOrEmpty(nativeIdentity)) {
		if (nativeIdentity.contains("OU")) {
			cn = nativeIdentity.substring(0, (nativeIdentity.indexOf("OU") - 1));
		}
	}
	log.debug("Exiting calculateCN method");
	return cn;
}


/**Method is replace all the special characters , hypen and space from the string**/
public String filterSpecialCharacter(String attrValue) {
	log.debug("Entering filterSpecialCharacter method");
	String filterString = null;
	if (Util.isNotNullOrEmpty(attrValue)) {
		Pattern pattern = Pattern.compile("[a-zA-Z0-9]*");
		Matcher matcher = pattern.matcher(attrValue);
		if (matcher.find()) {
			filterString = attrValue.replaceAll("[^a-zA-Z0-9]", "");
		} else {
			filterString = attrValue;
		}
	}
	log.debug("Exiting filterSpecialCharacter method");
	return filterString;
}

/**Method acquires lock on identity object to update the identity attributes**/
public Identity acquireLockOnIdentity(String identityName) {
	log.debug("Entering acquireLockOnIdentity method");
	int WAIT_TIMEOUT = 5;
	Identity lockedIden = null;
	if(Util.isNotNullOrEmpty(identityName)) {
		try {
			ObjectUtil.unlockIfNecessary(context,context.getObjectByName(Identity.class, identityName));
			lockedIden = ObjectUtil.lockIdentityByName(context, identityName, WAIT_TIMEOUT);
			log.debug("Successfully acquired lock on the identity object");
		}catch(Exception e) {
			log.error("Error occured while trying to acquire the lock on the user object: "+identityName);
		}
	}
	log.debug("Exiting acquireLockOnIdentity method");
	return lockedIden;
}

/**Method is used to convert the Date from String type to Date type**/
public Date getEpochDate(String customAttrName, String existingDate){
	log.debug("Entering getEpochDate method");
	Date newDate = null;
	if(Util.isNotNullOrEmpty(customAttrName)){
		String dateFormat = getCustomObject(customAttrName, "CMH-DateFormat");
		if(Util.isNotNullOrEmpty(dateFormat)){
			SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
			newDate = sdf.parse(existingDate);
		}
	}
	log.debug("Exiting getEpochDate method");
	return newDate;
}
  ]]></Source>
</Rule>
