<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="CMH-Leaver-Deprovision-Trigger-Rule" type="IdentityTrigger">
    <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and
        newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after
        the update, respectively.
    </Description>
    <Signature returnType="boolean">
        <Inputs>
            <Argument name="log">
                <Description>
                    The log object associated with the SailPointContext.
                </Description>
            </Argument>
            <Argument name="context">
                <Description>
                    A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
                </Description>
            </Argument>
            <Argument name="previousIdentity">
                <Description>
                    The identity before the refresh/aggregation (this will be null when an
                    identity is created).
                </Description>
            </Argument>
            <Argument name="newIdentity">
                <Description>
                    The identity after the refresh/aggregation (this will be null when an
                    identity is deleted).
                </Description>
            </Argument>
        </Inputs>
        <Returns>
            <Argument name="result">
                <Description>
                    A boolean describing the result of the rule.
                </Description>
            </Argument>
        </Returns>
    </Signature>
    <Source>
        <![CDATA[
		import java.text.ParseException;
		import java.text.SimpleDateFormat;
		import sailpoint.tools.Util;
		
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
		if(newIdentity!=null){
			String status = newIdentity.getStringAttribute("status");
			String deletionStatus = newIdentity.getStringAttribute("deletionStatus");
			String identityRetention = newIdentity.getStringAttribute("identityRetention");
			if(Util.nullSafeCaseInsensitiveEq(status,"TERMINATED")){
				String deletionDate = newIdentity.getStringAttribute("deletionDate");
				if(Util.isNotNullOrEmpty(deletionDate)){
					try{
						Date delDate = sdf.parse(deletionDate);
						Date currDate = new Date();
						if(currDate.after(delDate) && 
							!Util.nullSafeCaseInsensitiveEq(deletionStatus,"deleted") &&
							!Util.nullSafeCaseInsensitiveEq(identityRetention,"YES")){
							return true;
						}
					}catch(ParseException e){
						log.error("CMH-Leaver-Deprovision-Trigger-Rule: Error while parsing the Date");
					}				
				}
			}
		}
		return false;
		]]>
    </Source>
</Rule>
