<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="CMH-LegalHold-Users-Report-Generation-Rule">
  <Signature>
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source>

		import sailpoint.object.Identity;
		import sailpoint.object.Filter;
		import sailpoint.object.QueryOptions;
		import java.util.ArrayList;
		import java.util.List;
		import java.util.Map;
		import java.util.HashMap;
		import java.util.Map.Entry;
		import sailpoint.object.Application;
		import sailpoint.object.Link;
		import sailpoint.tools.GeneralException;
		import sailpoint.api.SailpointContext;
		import sailpoint.api.SailpointFactory;
		import sailpoint.object.Identity;
		import java.io.File;
		import java.io.FileWriter;
		import java.io.IOException;
		import java.io.Writer;
		import java.util.Set;
		import sailpoint.spring.SpringStarter;
		import java.io.File;
		import java.text.ParseException;
		import java.text.SimpleDateFormat;
		import java.util.Date;
		import org.apache.log4j.Logger;
		import sailpoint.object.Custom;
		import sailpoint.tools.Util;

  
		Logger log = Logger.getLogger("cmh.legalhold.rules");  
		
		public List getLegalHoldUsers()
		{
		log.debug("Entering getLegalHoldUsers()");
		List filterList = new ArrayList();
		List userNameList = new ArrayList();
		
		String userName="";
		String email= "";
		String assignmentType="";
		String employeeId="";
		String identityRetention ="Yes";
		//boolean legalHoldStatus = false;
		Filter stat= Filter.eq("identityRetention",identityRetention);
		//Filter stat= Filter.eq("inactive",legalHoldStatus);
		
		filterList.add(stat);
		Filter searchFilter = Filter.and(filterList);
		
		QueryOptions qo = new QueryOptions();
		qo.addFilter(searchFilter);
		//qo.setDistinct(true);
		
		// Iterator returned from context search
		  Iterator identityIterator;
		  try
			{
				identityIterator = context.search(Identity.class, qo);
		}
		catch(Exception ex)
			{
			log.error("Error: "+ex.getMessage());
		}
		
		// The  following if loop will Iterate the list of records retuned from context search and return the user list
			if(identityIterator!=null)
			{		
				while(identityIterator.hasNext())
				{		
					Identity identity= (Identity) identityIterator.next();
					userName = identity.getAttribute("userName");
					email = identity.getAttribute("email");
					assignmentType = identity.getAttribute("assignmentType");
		      employeeId = identity.getAttribute("employeeId");
		      
		      if(userName != null)
		      
		      {  
		      	Map attrDetails = new HashMap();
		      
						attrDetails.put("Username",userName);
		      	attrDetails.put("Employee ID",employeeId);
						attrDetails.put("Email",email);
						attrDetails.put("Assignment Type",assignmentType);
		      	{
							userNameList.add(attrDetails);	
		      	}
		    	}
					
				}	
			}
			log.debug("Exiting getLegalHoldUsers()");
		return userNameList;
		  
		}
		 
		public static List getHeader()throws GeneralException
			{
				
		  	log.debug("Entering getHeader()");
		  	List appList = new ArrayList();
				appList.add("Username");
				appList.add("Employee ID");
				appList.add("Email");
				appList.add("Assignment Type");
				log.debug("Exiting getHeader()");
				return appList;
			}
			
		public static List getSortUsers(Map users)throws GeneralException
			{
				log.debug("Entering getSortUsers(Map users)");
				List appList = getHeader();
				List sortList = new ArrayList();
		
				if (null != appList &amp;&amp; !appList.isEmpty()) {
					for (String attr : appList) {
						if (Util.isNotNullOrEmpty((String)users.get(attr))) {
							sortList.add(users.get(attr));
						} else {
							sortList.add(" ");
						}
					}
				}
		  log.debug("Exiting getSortUsers(Map users)");
				return sortList;
			}
			
		public String getListAsCsvString(List list)throws GeneralException
		    {
		        log.debug("Entering getListAsCsvString(List list)"); 
		        StringBuilder sb = new StringBuilder();
		        for(String str:list){
		            if(sb.length() != 0){
		                sb.append(",");
		            }
		            sb.append(str);
		        }
		  			 log.debug("Exiting getListAsCsvString(List list)");
		        return sb.toString();
		    }
		
		public static void callMethod(List users)throws IOException, GeneralException
			{
		  
		 Custom custom = null;
		 FileWriter writer = null;
		     if(users.isEmpty() != true)
		    {
		   	custom = context.getObject(Custom.class,"CMH-Custom-Generic-Filepath");
		    log.debug("Entering callMethod(List users)"); 
		    Date date = new Date();  
				SimpleDateFormat formatter= null;
		    formatter=new SimpleDateFormat("MM-dd-yyyy");
		    String strDate= formatter.format(date);//current date calculation
				formatter = new SimpleDateFormat("HH-mm-ss");  
				String counter=formatter.format(date);//current time calculation
				String p = custom.get("filepath");
		    log.debug("Report path from custom obj"+p);
				String path=p+"LegalHoldUsers"+strDate+"_"+counter+".csv";
		    
		    try{
		        writer = new FileWriter(path);
		
		        List values = new ArrayList();
		        String s = "";
		        String sp = "\n";
		
		
		        if (count == 0)
		        {
		          values = getHeader();
		          s =	getListAsCsvString(values);
		          writer.write(s.toString());
		          writer.append(sp.toString());
		          count = 1;
		        }
		
		         for (Map user : users)
		        {
		        values = getSortUsers(user);
		        s =	getListAsCsvString(values);
		        writer.write(s.toString());
		        writer.append(sp.toString());
		
		
		        }
		
		    }//end of try
		  catch (Exception e) {
		      log.error("Error in CsvFileWriter !!!");
		      log.error("Rule Error: "+e.getMessage());
				} //end of catch
		    
		  finally {
		
		    try {
		      writer.flush();
		      writer.close();
		    } catch (IOException e) {
		      log.error("Error while flushing/closing fileWriter !!!");
		      log.error("Rule Error: "+e.getMessage());
		    }
		
			}//end of finally   
		  }//end of if
		    else
		    {
		    
		    log.debug("No users are on Legal Hold");
		    
		    }
		  
		}
		  
		private static int count = 0;
		List list = getLegalHoldUsers();
		
		callMethod(list);
		return "success";
		  




</Source>
</Rule>