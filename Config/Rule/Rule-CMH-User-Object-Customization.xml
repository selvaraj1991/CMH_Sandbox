<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="CMH-User-Object-Customization-Rule" type="ResourceObjectCustomization">
  <Description>This rule is configured on the application and is called after the connector has build a ResourceObject from the native application data.

    Initially designed for non-rule based connectors to add SPPrivileged flag to an object, but could be used to do any transformations.
	
	This rule runs during infor aggregation and it runs prior to the Creation rule. It validates the user data and if the required data is missing then it will generate an audit for the user and the user won't be created in IIQ</Description>
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule" name="CMH-AD-Generic-Rulelibrary"/>
  </ReferencedRules>
  <Signature returnType="ResourceObject">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="object">
        <Description>
          The ResourceObject built by the connector.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          Application that references the connector.
        </Description>
      </Argument>
      <Argument name="connector">
        <Description>
          The connector object.
        </Description>
      </Argument>
      <Argument name="state">
        <Description>
          A Map containing state information.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="resourceObject">
        <Description>
          The updated resource object.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
	import org.apache.commons.lang.StringUtils;
	import org.apache.log4j.Logger;
	import sailpoint.api.IdentityService;
	import sailpoint.object.Attributes;
	import sailpoint.object.Custom;
	import sailpoint.object.Filter;
	import sailpoint.object.Identity;
	import sailpoint.object.Link;
	import sailpoint.object.QueryOptions;
	import sailpoint.tools.Util;

	Logger log = Logger.getLogger("Rule.CMH-User-Object-Customization-Rule");
	
	public boolean isConversionWithFutureDate(String oldEmpId, String usrName, Date startDate) {
		log.debug("Entering isConversionWithFutureDate method");
		Date currDate = new Date();
		if (startDate!=null) {
			if (Util.isNotNullOrEmpty(oldEmpId) && Util.isNotNullOrEmpty(usrName) && startDate.after(currDate)) {
				return true;
			}
		}
		log.debug("Exiting isConversionWithFutureDate method");
		return false;
	}

	public void updateCustomobj(String empId, String customObjName) {
		log.debug("Entering updateCustomobj method");
		if (Util.isNotNullOrEmpty(empId) && Util.isNotNullOrEmpty(customObjName)) {
			Custom customObj = context.getObjectByName(Custom.class, customObjName);
			if (customObj != null) {
				Attributes attrs = customObj.getAttributes();
				if (attrs != null && attrs.containsKey(empId)) {
					customObj.remove(empId);
					context.saveObject(customObj);
					context.commitTransaction();
				}
			}
		}
		log.debug("Exiting updateCustomobj method");
	}
	
	//check if birthMonthDay has valid format
	public boolean validateFormat(String dob) {
	    boolean isMatch = false;
		String regex =  "^[0-9]{2}-[0-9]{2}$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(dob);
		if(matcher.find()) {
			isMatch = true;
		}
		return isMatch;
	}

	//Rule starts from here
	log.debug("Entering CMH-User-Object-Customization-Rule");
	String firstName = object.getStringAttribute("FirstName");
	String lastName = object.getStringAttribute("LastName");
	String employeeId = (String) object.getAttribute("Employee");
	String managerId = object.getStringAttribute("SupvEmployeeID");
	String userType = object.getStringAttribute("RelationshipToOrganization");
	String assignmentType = object.getStringAttribute("AssignmentType");
	String status = object.getStringAttribute("RelationshipStatus");
	String birthMonthDay = object.getStringAttribute("BirthMonthDay");

	boolean isAttributeMissing = false;
	String attrName = null;
	if (StringUtils.isBlank(firstName)) {
		isAttributeMissing = true;
		attrName = "FirstName";
	} else if (StringUtils.isBlank(lastName)) {
		isAttributeMissing = true;
		attrName = "LastName";
	} else if (StringUtils.isBlank(employeeId)) {
		isAttributeMissing = true;
		attrName = "Employee";
	} else if (StringUtils.isBlank(managerId)) {
		isAttributeMissing = true;
		attrName = "SupvEmployeeID";
	} else if (StringUtils.isBlank(userType)) {
		isAttributeMissing = true;
		attrName = "RelationshipToOrganization";
	} else if (StringUtils.isBlank(status)) {
		isAttributeMissing = true;
		attrName = "RelationshipStatus";
	} else if (StringUtils.isBlank(birthMonthDay)) {
		isAttributeMissing = true;
		attrName = "BirthMonthDay";
	} else if (StringUtils.isBlank(assignmentType)) {
		isAttributeMissing = true;
		attrName = "AssignmentType";

	}
	
	log.debug("Validating the user details in CMH-User-Object-Customization-Rule fro the user: "+employeeId);
	
	
	String CUSTOM_ATTR_NAME = "genericViewDateFormat";
	String START_DATE = "StartDate";
	String ORIENTATION_DATE= "OrientationDate";
	String TERMINATION_DATE= "TerminationDate";
	if(Util.isNotNullOrEmpty(object.getAttribute(START_DATE))){
		String sDate = (String)object.getAttribute(START_DATE);
		String cDate = dateFormatted(CUSTOM_ATTR_NAME,sDate);
		object.setAttribute(START_DATE,cDate);
	}
	if(Util.isNotNullOrEmpty(object.getAttribute(ORIENTATION_DATE))){
		String sDate = (String)object.getAttribute(ORIENTATION_DATE);
		String cDate = dateFormatted(CUSTOM_ATTR_NAME,sDate);
		object.setAttribute(ORIENTATION_DATE,cDate);
	}
	if(Util.isNotNullOrEmpty(object.getAttribute(TERMINATION_DATE))){
		String sDate = (String)object.getAttribute(TERMINATION_DATE);
		String cDate = dateFormatted(CUSTOM_ATTR_NAME,sDate);
		object.setAttribute(TERMINATION_DATE,cDate);
	}
	
	if (isAttributeMissing) {
		String attrValue = null;
		Map map = new HashMap();
		map.put("setString1", attrName + " is mandatory attribute that cannot be null or empty");
		auditWrite("Infor-Mandatory-Attributes", "CMH-User-Object-Customization-Rule", employeeId, attrName, attrValue, map);
		object = null;
	} else if(!validateFormat(birthMonthDay)) {
	     String attrValue = birthMonthDay;
		 Map map = new HashMap();
		 map.put("setString1", "BirthMonthDay format is invalid,it should be in mm-dd format");
		 auditWrite("Infor-Mandatory-Attributes", "CMH-User-Object-Customization-Rule", employeeId, "birthMonthDay", attrValue, map);
		 object = null;	       	    
	} else {
		QueryOptions ops = new QueryOptions();
		Filter usrFilter = Filter.eq("employeeId", employeeId);
		ops.addFilter(usrFilter);
		Iterator existingUsers = context.search(Identity.class, ops);
		if (existingUsers != null && existingUsers.hasNext()) {
			Identity iden = (Identity) existingUsers.next();
			if (iden != null && application != null) {
				IdentityService identityService = new IdentityService(context);
				List links = identityService.getLinks(iden, application);
				if (links != null && links.size() > 0) {
					Link hrLink = links.get(0);
					if (hrLink != null) {
						String userName = (String) hrLink.getAttribute("Username");
						if (Util.isNotNullOrEmpty(userName)) {
							object.setDisplayName(userName);
							object.setAttribute("Username", userName);
							object.setIdentity(userName);
						}
						String email = (String) hrLink.getAttribute("WorkEmail");
						if (Util.isNotNullOrEmpty(email)) {
							object.setAttribute("WorkEmail", email);
						}
					}
				}
			}
		} else {
			String oldEmpId = object.getStringAttribute("OtherEmpId");
			String usrName = object.getStringAttribute("Username");
    		String stDate = object.getAttribute(START_DATE);
    		Date startDate =  getDate("genericViewDateFormat",stDate);
			if (isConversionWithFutureDate(oldEmpId, usrName, startDate)) {
				Custom fUsrObj = context.getObjectByName(Custom.class, "CMH-Custom-Future-Conversion-Users");
				if (fUsrObj == null) {
					fUsrObj = new Custom();
					fUsrObj.setName("CMH-Custom-Future-Conversion-Users");
				}
				fUsrObj.put(employeeId, startDate);
				context.saveObject(fUsrObj);
				context.commitTransaction();
				object = null;
			} else {
				updateCustomobj(employeeId, "CMH-Custom-Future-Conversion-Users");
			}
		}
	}

	if (object != null) {
		if (status.equalsIgnoreCase("PREHIRE") || status.equalsIgnoreCase("TERMINATED")) {
			object.setAttribute("IIQDisabled", true);
		} else {
			object.setAttribute("IIQDisabled", false);
		}
	}
	log.debug("Exiting CMH-User-Object-Customization-Rule");
	return object; 
  ]]></Source>
</Rule>
