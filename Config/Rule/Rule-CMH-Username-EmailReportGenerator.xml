<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="CMH-Username-Email-Report-Generator-Rule">
    <Description>This rule is used to generate a report of users who are created in IIQ with unique username, so that the infor can be updated with the same.</Description>
    <ReferencedRules>
        <Reference class="sailpoint.object.Rule" name="CMH-AD-Generic-Rulelibrary"/>
    </ReferencedRules>
    <Source><![CDATA[
		import java.io.FileWriter;
		import java.io.IOException;
		import java.text.DateFormat;
		import java.text.ParseException;
		import java.text.SimpleDateFormat;
	    import org.apache.log4j.Logger;
		import sailpoint.object.Attributes;
		import sailpoint.object.Custom;
		import sailpoint.object.Filter;
		import sailpoint.object.Identity;
		import sailpoint.object.QueryOptions;
		import sailpoint.tools.GeneralException;
		import sailpoint.tools.Util;

		Logger log = Logger.getLogger("Rule.CMH-Username-Email-Report-Generator-Rule");
		String nameCustomObjName = "CMH-NameChange-UsernameAndEmail";
        
        //This method fetches the last timestamp of the this task 
		public Date getCustomObjectTimestamp(String customObjectName, String customName) {
			log.debug("Entering getCustomObjectTimestamp method");
			Date date = null;
			List uList = null;
			Custom custom = getCustom(customName);
			if (null != custom) {
				date = (Date) custom.get(customObjectName);
			}
			log.debug("Exiting getCustomObjectTimestamp method");
			return date;
		}
		
        //Gets the list of usernames under nonexported tag from custom object
		public List getCustomNameChangeData(String customName) {
			log.debug("Entering getCustomNameChangeData method");
			List uList = null;
			Custom custom = getCustom(customName);
			if (null != custom) {
				uList = custom.getAttributes().getList("NOTEXPORTED");
			}

			log.debug("Exiting getCustomNameChangeData method");
			return uList;
		}
		
		public Custom getCustom(String customName) {
			log.debug("Entering getCustom method");
			Custom customObj = null;
			try {
				customObj = context.getObject(Custom.class, customName);
			} catch(GeneralException e) {
				log.error("Error in getCustom method " + e.getMessage());
			}
			log.debug("Exiting getCustom method");
			return customObj;
		}
		//Using Identity Object getting the user attributes and putting then in Map
		public Map userMapGeneration(Identity user, String action) {
		   log.debug("Entering userMapGeneration()");
		   Map map = new HashMap();
           if(user != null  && user.isCorrelated() && Util.isNotNullOrEmpty(action)) {
              map.put("Username", user.getName());
			  map.put("UseForWorkEmail", user.getEmail());
			  map.put("EmployeeID", user.getStringAttribute("employeeId"));
			  map.put("Supervisor",user.getStringAttribute("personIsSupv"));
			  map.put("Action",action);		  
           }
           log.debug("Exiting userMapGeneration()");
           return map;
        }
		//Generated the list of user mapped records
		public List customUserDetail(String customName) {
			log.debug("Entering customUserDetail method");
			List arrList = getCustomNameChangeData(customName);
			List dataList = null;
			if (null != arrList && arrList.size() > 0) {
				dataList = new ArrayList();
				for (int i = 0; i < arrList.size(); i++) {
					Identity user = context.getObjectByName(Identity.class, arrList.get(i).toString());
					 Map map = userMapGeneration(user,"NAMECHANGE");
					 if(!Util.isEmpty(map)) {
				        dataList.add(map);
					}
				}
			} else {
				log.debug("There are no users which needs to be exported");
			}
			log.debug(" Exiting CustomUserDetail method");
			return dataList;
		}
		
		//Gets the user list from nonexported tag,puts under exported and deletes list from nonexported
		public void updateCustomNameChangeData(List dataList, String customName) {
			log.debug("Entering updateCustomNameChangeData method");

			if (null != dataList && dataList.size() > 0) {
				List finalList = null;
				Custom custom = null;
				try {
					custom = getCustom(customName);
					if (null != custom) {
						finalList = new ArrayList();
						List uListExpData = custom.getAttributes().getList("EXPORTED");
						if (null != uListExpData && uListExpData.size() > 0) {
							finalList.addAll(uListExpData);
						}
						finalList.addAll(dataList);
						String lock = custom.getLock();
						custom.setLock(lock);
						custom.put("EXPORTED", finalList);
						context.saveObject(custom);
						custom.put("NOTEXPORTED", "");
						context.saveObject(custom);
						context.commitTransaction();
						custom.remove(lock);

					}

				} catch(GeneralException e) {
					log.error("Error in updateCustomNameChangeData method"+e.getMessage());
				}
			} else {
				log.debug("Custom dataList does not have any value");
			}
			log.debug("Exiting updateCustomNameChangeData method");
		}

        //Updating the last run timestamp to custom object
		public void updateCustomTimeStamp(Date lastTimeStamp, String customName) {
			log.debug("Entering updateCustomTimeStamp method");
			if (null != lastTimeStamp) {
				try {
					Custom custom = getCustom(customName);
					if (null != custom) {
						String lock = custom.getLock();
						custom.setLock(lock);
						custom.put("Timestamp", lastTimeStamp);
						context.saveObject(custom);
						context.commitTransaction();
						custom.remove(lock);
					}
				} catch(GeneralException e) {
					log.error("ERROR in updateCustomTimeStamp" + e.getMessage());
				}
			} else {
				log.debug("lastTimeStamp is null");
			}
			log.debug("Exiting updateCustomTimeStamp method");
		}

		public Date getDateTime() {
			log.debug("Entering getDateTime method");
			String format = getCustomObject("userNameGenerationTimestamp","CMH-DateFormat");
			Date today = null;
			if(Util.isNotNullOrEmpty(format)) {
				SimpleDateFormat sdf = new SimpleDateFormat(format);
				try {
					today = sdf.parse(sdf.format(new Date()));
				} catch(ParseException e) {
					log.error(" Error in getDateTime method" + e.getMessage());
				}
			}
			log.debug("Exiting getDateTime method");
			return today;
		}
        //searching the users created within specified timestamp , appending custom data and writing to data to csv file
		public boolean generateReport(Date startTime, Date endTime) {
			log.debug("Entering generateReport method");
			Date today = null;
			List list = new ArrayList();
			List customDataList = customUserDetail(nameCustomObjName);
			List finalList = new ArrayList();
			FileWriter fileWriter = null;
			String NEW_LINE_SEPARATOR = "\n";
			String COMMA_DELIMITER = ",";
			boolean isSuccess = false;
			QueryOptions qo = new QueryOptions();
			Filter f1 = Filter.ge("created", startTime);
			Filter f2 = Filter.lt("created", endTime);
			Filter f3 = Filter.and(f1, f2);
			qo.addFilter(f3);
			Iterator itr = null;

			try {
				itr = context.search(Identity.class, qo);
				if (itr != null && itr.hasNext()) {
					while (itr.hasNext()) {
						Identity user = (Identity) itr.next();
						if (null != user && user.isCorrelated()) {
						    Map map = userMapGeneration(user,"NEWHIRE");
						    if(!Util.isEmpty(map)) {
						       list.add(map);
						    }
						}
					}
				} else {
					if (null == customDataList) {
						isSuccess = true;
						log.debug(" Exiting generateReport method");
						return isSuccess;
					}
				}
			} catch(GeneralException e) {
				log.error("Error in generateReport method " + e.getMessage());
			} finally {
				if (null != itr) {
					sailpoint.tools.Util.flushIterator(itr);
				}
			}
			if (null != customDataList && customDataList.size() > 0) {
				finalList.addAll(customDataList);
			}
			if (null != list && list.size() > 0) {
				finalList.addAll(list);
			}
			if (null != finalList && finalList.size() > 0) {
			    String format = getCustomObject("userNameFileNameTimestamp","CMH-DateFormat");
			    if(Util.isNotNullOrEmpty(format)) {
					DateFormat currentDateFormatWithTime = new SimpleDateFormat(format);
					String strCurrentDateTime = currentDateFormatWithTime.format(endTime);
					String filename = "SailPointADGHRInbound_" + strCurrentDateTime + ".csv";
					String FILE_HEADER = "EmployeeID,Username,UseForWorkEmail,Action,Supervisor";
					Map map = null;
					String filepath = getCustomObject("filepath", "CMH-Custom-Generic-Filepath");
					if (Util.isNotNullOrEmpty(filepath) && new File(filepath).exists()) {
						try {
							fileWriter = new FileWriter(filepath + filename);
							fileWriter.append(FILE_HEADER.toString());
							fileWriter.append(NEW_LINE_SEPARATOR);
							for (int i = 0; i < finalList.size(); i++) {
								map = (Map) finalList.get(i);
								fileWriter.append(map.get("EmployeeID").toString());
								fileWriter.append(COMMA_DELIMITER);
								fileWriter.append(map.get("Username").toString());
								fileWriter.append(COMMA_DELIMITER);
								if (null != (map.get("UseForWorkEmail"))) {
									fileWriter.append(map.get("UseForWorkEmail").toString());
								} else {
									fileWriter.append("NULL");
								}
								fileWriter.append(COMMA_DELIMITER);
								fileWriter.append(map.get("Action").toString());
								fileWriter.append(COMMA_DELIMITER);
								if (null != (map.get("Supervisor"))) {
									fileWriter.append(map.get("Supervisor").toString());
								} else {
									fileWriter.append("NULL");
								}
								fileWriter.append(NEW_LINE_SEPARATOR);
	
							}
							log.debug("CSV file was created successfully !!!");
							isSuccess = true;
						} catch(IOException e) {
							log.error("IOException in generateReport method" + e.getMessage());
						}
						try {
							if (null != fileWriter) {
								fileWriter.flush();
								fileWriter.close();
							}
						} catch(IOException e) {
							log.error("IOException in closing fileWriter of generateReport method " + e.getMessage());
						}
					} else {
						log.error("Filepath is not present in custom object or is NULL");
						throw new sailpoint.tools.GeneralException("CMH-Username-Email-Report-Generator-Rule :ERROR : Given file location is not proper");
					}
			    }
			} else {
				isSuccess = false;
			}
			log.debug("Exiting generateReport method");
			return isSuccess;
		}
		
		//Rule starts from here
		log.debug("Entering CMH-Username-Email-Report-Generator-Rule");
		Date lastTimeStamp = getCustomObjectTimestamp("Timestamp", "CMH-Last-Generated-Timestamp-Report");
		Date startTime = null;
		Date endTime = null;
		if (null == lastTimeStamp) {
			Date date = getDateTime();
			if (null != date) {
				Calendar calendar = Calendar.getInstance();
				calendar.setTime(date);
				calendar.add(Calendar.DATE, -1);
				startTime = calendar.getTime();
				endTime = date;
			}
		} else {
			startTime = lastTimeStamp;
			endTime = getDateTime();
		}
		boolean flag = false;
		if (null != startTime && null != endTime) {
			boolean success = generateReport(startTime, endTime);
			if (success) {
				lastTimeStamp = endTime;
				updateCustomTimeStamp(lastTimeStamp, "CMH-Last-Generated-Timestamp-Report");
				List dataList = getCustomNameChangeData(nameCustomObjName);
				if (null != dataList && dataList.size() > 0) {
					updateCustomNameChangeData(dataList, nameCustomObjName);
				}
				flag = true;
			} else {
				flag = false;
			}
		}
		if (flag) {
			log.debug("Exiting CMH-Username-Email-Report-Generator-Rule");
			return "success";
		}
		
		log.debug("Exiting CMH-Username-Email-Report-Generator-Rule");
		return "Failed";

 ]]></Source>
</Rule>
