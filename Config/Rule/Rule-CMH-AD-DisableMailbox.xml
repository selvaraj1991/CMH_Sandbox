<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="CMH-AD-DisableMailbox-Rule" type="ConnectorBeforeModify">
  <Attributes>
    <Map>
      <entry key="ObjectOrientedScript" value="true"/>
      <entry key="disabled" value="false"/>
      <entry key="extension" value=".ps1"/>
      <entry key="program" value="powershell.exe"/>
      <entry key="timeout" value="4000"/>
    </Map>
  </Attributes>
  <Description>This rule assign ACL to userâ€™s home folder and perform DF Map</Description>
  <Signature>
    <Inputs>
      <Argument name="log">
        <Description>
                    The log object associated with the SailPointContext.
                </Description>
      </Argument>
      <Argument name="context">
        <Description>
                    A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
                </Description>
      </Argument>
      <Argument name="plan">
        <Description>
                    The ProvisioningPlan object on its way to the Connector.
                </Description>
      </Argument>
      <Argument name="application">
        <Description>
                    The application object that references this before/after script.
                </Description>
      </Argument>
      <Argument name="result">
        <Description>
                    The ProvisioningResult object returned by the connectors provision method. This can be null and in
                    many cases the connector will not return a result and instead will annotate the plans
                    ProvisioningResult either at the plan or account level.
                </Description>
      </Argument>
    </Inputs>
  </Signature>
  <Source>
Import-Module ActiveDirectory
Add-type -path  C:\\Software\\IQService\\Utils.dll

$logRootDirectory = "C:\Software\Log\";

$sReader = New-Object System.IO.StringReader([System.String]$env:Request);

#Form the xml reader objects
$xmlReader = [System.xml.XmlTextReader]([sailpoint.utils.xml.XmlUtil]::getReader($sReader));

#Create SailPoint objects
$requestObject = New-Object Sailpoint.Utils.objects.AccountRequest($xmlReader);

if($requestObject)
{
	$oper=$null
	$dn=$requestObject.NativeIdentity
	$requestedOperation=$requestObject.Operation
	if($requestedOperation -eq "Disable"){
		foreach( $attribute in $requestObject.AttributeRequests )
		{
			if(($attribute.name -eq "AC_NewParent"))
			{
				#It is a Leaver Process
				$oper = "Leaver";
				break
			}
		}
	}
}

if($dn -and $oper -and ($oper -eq "Leaver")){
	$upperCaseDN = $dn.ToUpper();
	$usrName = $upperCaseDN.Substring($upperCaseDN.IndexOf("CN=")+3,$upperCaseDN.IndexOf("OU=")-4);
	if($usrName){
		$logFile = $logRootDirectory+$usrName+"Disable-$(get-date -f 'MMddyyyy-hhmmss').log";
	}else{
	$logFile = $logRootDirectory+"Disable-$(get-date -f 'MMddyyyy-hhmmss').log";
	}
	Add-Content -path $logFile -value "$(get-date -f 'MM-dd-yyy HH:mm:ss') : [DEBUG] adAfterCreatePowerShell: Entering the script";
	Try
	{
		$EXOSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri %%CONNECTIONURI%% -Authentication Kerberos
		Import-PSSession $EXOSession -DisableNameChecking;
		Add-Content -path $logFile -value "$(get-date -f 'MM-dd-yyy HH:mm:ss') : [DEBUG] Session created and import is complete";
	}
	Catch
	{
		$ErrorMessage = $_.Exception.Message;
		$ErrorActionPreference="Continue";
		Add-Content -path $logFile -value "$(get-date -f 'MM-dd-yyy HH:mm:ss') : [ERROR] Error in creating Session=====> $ErrorMessage";
	}
	$userSAM = $null
	$count=0
	while (!$userSAM -and $count -lt 5)
	{
		if($count -gt 0){
			Add-Content -path $logFile -value "$(get-date -f 'MM-dd-yyy HH:mm:ss') : [DEBUG] User's AD Object not found: Retrying count $count";
			sleep -s 10
		}
		Try
		{
			$userSAM = Get-ADUser -Filter { distinguishedName -Eq $dn } -properties EmailAddress,DisplayName -server %%CMH-AD-GCServer%%
		}
		Catch
		{
			$ErrorMessage = $_.Exception.Message;
			Add-Content -path $logFile -value "$(get-date -f 'MM-dd-yyy HH:mm:ss') : [ERROR] Error While retrieving the AD object of User  =====> $ErrorMessage";
		}
		$count=$count+1
	}
	
	if($userSAM)
	{
		$sam = $userSAM.SamAccountName
		$dispName = $userSAM.DisplayName
		Add-Content -path $logFile -value "$(get-date -f 'MM-dd-yyy HH:mm:ss') : [DEBUG] User's AD Object found";
		if([bool](Get-RemoteMailbox -Identity "$sam"))
		{
			Set-ADServerSettings -RecipientViewRoot $($userSAM.OrganizationalUnit)
			
			$mailboxName = "TERM - $dispName"
			Try
			{
				#set the display name on the mailbox through the Hybrid Exchange server
				Set-RemoteMailbox -Identity $sam -DisplayName $mailboxName
				
				#set the address to hidden for the mailbox through the Hybrid Exchange
				Set-RemoteMailbox -Identity $sam -HiddenFromAddressListsEnabled $true
				
				Add-Content -path $logFile -value "$(get-date -f 'MM-dd-yyy HH:mm:ss') : [DEBUG] DisplayName updated and Hidden successfully";
			}
			Catch
			{
				#Set the display name for hte user and hide from the GAL in AD
				Set-ADUser -Identity $sam -Displayname $mailboxName -Add @{msExchHideFromAddressLists="TRUE"}
				Add-Content -path $logFile -value "$(get-date -f 'MM-dd-yyy HH:mm:ss') : [DEBUG] Updating DisplayName and Hiding the mailbox through AD";
			}
		}#append TERM to the display name, and hide the address from the GAL
	}
	Try
	{
		Remove-PSSession $EXOSession;
		Add-Content -path $logFile -value "$(get-date -f 'MM-dd-yyy HH:mm:ss') : [DEBUG] Removed PS Session";
	}
	Catch
	{
		$ErrorMessage = $_.Exception.Message;
		Add-Content -path $logFile -value "$(get-date -f 'MM-dd-yyy HH:mm:ss') : [ERROR] Error while Removing PS Session=====> $ErrorMessage";
		$ErrorActionPreference="Stop";
	}
}
  
</Source>
</Rule>
