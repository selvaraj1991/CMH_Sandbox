<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity,IdentityRequest" name="CMH-LegalHold-Add-Workflow" type="LCMProvisioning">
  <Variable name="plan" type="sailpoint.object.ProvisioningPlan">
    <Description>The provisioning plan which is built during the workflow.  
	</Description>
  </Variable>
  <Variable name="project" type="ProvisioningProject">
    <Description>  
		ProvisioningProject which is just a compiled version of the ProvisioningPlan.  
	</Description>
  </Variable>
  <Variable name="identityRequestId">
    <Description>
		The Identity Request Id we get back from the request.
	</Description>
  </Variable>
  <Variable initializer="false" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable name="legalHoldIdentity"/>
  <Variable name="isDebugEnabled" type="boolean">
    <Script>
    	<Source>
		<![CDATA[
  			import org.apache.log4j.Logger;
  			Logger log = Logger.getLogger("Workflow.CMH-LegalHold-Add");
  			if(log.isDebugEnabled()){
  				return true;
  			}
  			return false;
  		]]>
		</Source>
    </Script>
  </Variable>
  <Variable name="adAppName">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.object.Custom;
  			
  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
  			String appName = null;
  			if(custom!=null){
  				appName = custom.getString("adApplication");
  			}
  			return appName;
  		]]>
  		</Source>
  	</Script>
  </Variable>
  <Variable name="LegalHold_Group">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.object.Custom;
  			
  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
  			String legalHold = null;
  			if(custom!=null){
  				legalHold = custom.getString("Legal-Hold-Group");
  			}
  			return legalHold;
  		]]>
  		</Source>
  	</Script>
  </Variable>
  <Variable name="identityName"/>
  <Variable name="userType"/>
  <Variable name="userStatus"/>
  <Variable name="employeeId"/>
  <Variable name="adOU"/>
  <Variable name="adExists" type="boolean"/>
  <Variable name="validationErrors" type="java.util.List"/>
  <Variable initializer="string:YES" name="isSubmitted"/>
  <RuleLibraries>
	<Reference class="sailpoint.object.Rule" name="CMH-AD-Generic-Rulelibrary"/>
  </RuleLibraries>
  <Step icon="Start" name="Start" posX="154" posY="126">
    <Transition to="Legal Hold Form"/>
  </Step>
  <Step icon="Provision" name="Legal Hold Form" posX="262" posY="126">
    <Approval name="Legal Hold Identity" owner="ref:launcher" return="legalHoldIdentity">
      <Arg name="workItemDescription" value="string:Legal Hold"/>
      <Arg name="workItemForm" value="string:CMH-Legal-Hold-Add-Form"/>
    </Approval>
    <Transition to="Retrieve Identity Info" when="approved"/>
	<Transition to="Stop">
      <Script>
        <Source>
          wfcontext.getWorkflowCase().put("isSubmitted","NO");
          return true;
        </Source>
      </Script>
    </Transition>
  </Step>
  <Step name="Retrieve Identity Info" posX="373" posY="125">
  	<Script>
  		<Source>
  		<![CDATA[
  			import org.apache.log4j.Logger;
  			import sailpoint.object.Identity;
			import sailpoint.tools.Util;
  			
  			Logger log = Logger.getLogger("Workflow.CMH-LegalHold-Add");
  			String identityName = null;
  			String userType = null;
  			String status = null;
			String empId = null;
  			Identity iden = context.getObjectById(Identity.class, legalHoldIdentity);
  			if(iden!=null){
  				identityName = iden.getName();
  				if(Util.isNotNullOrEmpty(identityName)){
  					wfcontext.getRootWorkflowCase().put("identityName",identityName);
  				}
  				userType = iden.getStringAttribute("userType");
				if(Util.isNotNullOrEmpty(userType)){
					wfcontext.getRootWorkflowCase().put("userType",userType);
				}
				status = iden.getStringAttribute("status");
				if(Util.isNotNullOrEmpty(status)){
					wfcontext.getRootWorkflowCase().put("userStatus",status);
				}
				empId = iden.getStringAttribute("employeeId");
				if(Util.isNotNullOrEmpty(empId)){
					wfcontext.getRootWorkflowCase().put("employeeId",empId);
				}
  			}
  			if (isDebugEnabled) {
				log.debug("Legal Hold user's username "+identityName);
			}
  		]]>
  		</Source>
  	</Script>
  	<Transition to="Validate Data"/>
  </Step>
  <Step icon="Analysis" name="Validate Data" posX="473" posY="125" resultVariable="validationErrors">
  	<Script>
  		<Source>
  		<![CDATA[
  			import org.apache.log4j.Logger;
  			import sailpoint.tools.Util;
  			Logger log = Logger.getLogger("Workflow.CMH-LegalHold-Add");
  			
  			List errorMessages = new ArrayList();
			if(Util.isNullOrEmpty(identityName)){
				log.error("identityName is NULL");
				errorMessages.add("identityName is NULL");
			}
			if(Util.isNullOrEmpty(userType)){
				log.error("userType is NULL");
				errorMessages.add("userType is NULL");
			}
			if(Util.isNullOrEmpty(userStatus)){
				log.error("userStatus is NULL");
				errorMessages.add("userStatus is NULL");
			}
			if(Util.isNullOrEmpty(employeeId)){
				log.error("employeeId is NULL");
				errorMessages.add("employeeId is NULL");
			}
			if(Util.isNullOrEmpty(LegalHold_Group)){
				log.error("Custom object is not configured properly-Unable to get the LegalHold group");
				errorMessages.add("Custom object is not configured properly-Unable to get the LegalHold group");
			}
			return errorMessages;
  		]]>
  		</Source>
  	</Script>
  	<Transition to="Check AD Exists">
  		<Script>
  			<Source>
  			<![CDATA[
  				if(validationErrors==null || validationErrors.size()<=0){
  					return true;
  				}
  				return false;
  			]]>
  			</Source>
  		</Script>
  	</Transition>
  	<Transition to="Add Error Message"/>
  </Step>
  <Step icon="Task" name="Check AD Exists" posX="540" posY="218" resultVariable="adExists">
  	<Script>
  		<Source>
  		<![CDATA[
  			import org.apache.log4j.Logger;
  			import sailpoint.api.IdentityService;
  			import sailpoint.object.Application;
  			import sailpoint.object.Identity;
  			
  			Logger log = Logger.getLogger("Workflow.CMH-LegalHold-Add");
  			Identity iden = context.getObjectByName(Identity.class, identityName);
  			Application app = context.getObjectByName(Application.class,adAppName);
  			if(iden!=null && app!=null){
  				IdentityService identityService = new IdentityService(context);
				List adLinks = identityService.getLinks(iden,app);
				if(adLinks!=null && adLinks.size()>0){
					return true;
				}
  			}
  			return false;
  		]]>
  		</Source>
  	</Script>
  	<Transition to="Retrieve OU" when="script:adExists==true"/>
  	<Transition to="Stop"/>
  </Step>
  <Step icon="Task" name="Retrieve OU" posX="606" posY="321" resultVariable="adOU">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.object.Custom;
  			import sailpoint.tools.Util;
  			
  			String adOU = null;
  			Custom custom = context.getObjectByName(Custom.class,"CMH-Custom-Object-AD-Application");
 			if(custom!=null){
 				if(Util.nullSafeCaseInsensitiveEq(userType,"EMPLOYEE")){
		  			if(Util.nullSafeCaseInsensitiveEq(userStatus,"ACTIVE")){
		  				adOU = custom.getString("activEmployeeOU");
		  			}else if(Util.nullSafeCaseInsensitiveEq(userStatus,"TERMINATED")){
		  				adOU = custom.getString("inactivEmployeeOU");
		  			}
		  		}else{
		  			adOU = custom.getString("nonEmployeeOU");
		  		}
 			}
  			return adOU;
  		]]>
  		</Source>
  	</Script>
  	<Transition to="Move User OU">
    	<Script>
    		<Source>
    		<![CDATA[
				import sailpoint.tools.Util;
    			if(Util.isNotNullOrEmpty(adOU)){
    				return true;
    			}
				if(validationErrors==null){
					validationErrors = new ArrayList();
				}
				validationErrors.add("CMH-Custom-Object-AD-Application: Not configured properly with Legal Hold OU details");
				wfcontext.getRootWorkflowCase().put("validationErrors",validationErrors);
    			return false;
    		]]>
    		</Source>
    	</Script>
    </Transition>
	<Transition to="Stop"/>
  </Step>
  <Step name="Move User OU" posX="782" posY="318" resultVariable="plan">
    <Description>Modifying OU for legal hold users in active directory.</Description>
    <Script>
      <Source>
      <![CDATA[
      		import org.apache.log4j.Logger;
      		import sailpoint.api.IdentityService;
			import sailpoint.object.Application;
			import sailpoint.object.Identity;
			import sailpoint.object.Link;
			import sailpoint.object.ProvisioningPlan;
			import sailpoint.object.ProvisioningPlan.AccountRequest;
			import sailpoint.object.ProvisioningPlan.AttributeRequest;
			
			Logger log = Logger.getLogger("Workflow.CMH-LegalHold-Add");
			if (isDebugEnabled) {
				log.debug("Generating plan to move the user AD account to appropriate OU");
			}
			ProvisioningPlan plan = new ProvisioningPlan();
			Identity iden = context.getObjectByName(Identity.class,identityName);
			Application app = context.getObjectByName(Application.class,adAppName);
			List accountRequests = new ArrayList();
			if(iden!=null && app!=null){
				IdentityService identityService = new IdentityService(context);
				List adLinks = identityService.getLinks(iden,app);
				if(adLinks!=null && adLinks.size()>0){
					for(Link li:adLinks){
						if(li!=null){
							AccountRequest acctReq = new AccountRequest();
							acctReq.setOperation(AccountRequest.Operation.Modify);
							acctReq.setApplication(adAppName);
							acctReq.setNativeIdentity(li.getNativeIdentity());
							acctReq.add(new AttributeRequest("AC_NewParent",adOU));
							acctReq.add(new AttributeRequest("memberOf",ProvisioningPlan.Operation.Add,LegalHold_Group));
							accountRequests.add(acctReq);
						}
					}
				}
				plan.setIdentity(iden);
			}
			plan.setAccountRequests(accountRequests);
			
			return plan;
		]]>
		</Source>
    </Script>
    <Transition to="Compile Project"/>
  </Step>
  <Step action="call:compileProvisioningProject" icon="Task" name="Compile Project" posX="912" posY="317" resultVariable="project">
    <Arg name="requester" value="string:spadmin"/>
    <Arg name="requireCreateTemplates" value="string:false"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="noLocking" value="true"/>
    <Arg name="noApplicationTemplates" value="string:true"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="optimisticProvisioning" value="string:false"/>
    <Arg name="plan" value="ref:plan"/>
    <Description>Compile the provisioning plan into a provisioning project.  
                 If you need to pass in provisioner options like "noFiltering"  
                 or "noRoleDeprovisioning" you must pass them as explicit  
                 arguments to the call.  
                 The evaluation options "requester" and "source" are commonly  
                 set here.               
                 You can also pass things into the Template and Field scripts by  
                 defining Args in this step.</Description>
    <Transition to="Create Identity Request"/>
  </Step>
  <Step action="call:createIdentityRequest" icon="Task" name="Create Identity Request" posX="1025" posY="317">
    <Arg name="identityName" value="1002"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="priority" value="string:Normal"/>
    <Arg name="flow" value="ref:flow"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Transition to="Provision"/>
  </Step>
  <Step action="call:provisionProject" icon="Provision" name="Provision" posX="1123" posY="318">
    <Arg name="background" value="false"/>
    <Arg name="project" value="ref:project"/>
    <Transition to="Complete Identity Request"/>
  </Step>
  <Step action="call:completeIdentityRequest" icon="Task" name="Complete Identity Request" posX="1238" posY="319" resultVariable="identityRequest">
    <Arg name="autoVerify" value="false"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="identityRequestId" value="ref:identityRequestId"/>
    <Transition to="Do Target Aggregation"/>
  </Step>
  <Step name="Do Target Aggregation" posX="1387" posY="318" resultVariable="validationErrors">
  	<Script>
  		<Source>
  		<![CDATA[
  			import sailpoint.api.IdentityService;
			import sailpoint.object.Application;
			import sailpoint.object.Identity;
			import sailpoint.object.Link;
			import sailpoint.tools.Util;
		
			if(validationErrors==null){
				validationErrors = new ArrayList();
			}
			Identity iden = context.getObjectByName(Identity.class,identityName);
			Application app = context.getObjectByName(Application.class,adAppName);
			if (iden!=null && app != null) {
				IdentityService idnService = new IdentityService(context);
               	List adLinks = idnService.getLinks(iden, app);
           		for (Link adLink : adLinks) {
           			if(adLink!=null){
	           			String nativeIdentity = adLink.getNativeIdentity();
	           			if(Util.isNotNullOrEmpty(nativeIdentity)){
           					String userCN = calculateCN(nativeIdentity);
           					if(Util.isNotNullOrEmpty(userCN)){
           						String newUserDN = userCN+","+adOU;
           						validationErrors.addAll(doTargetedAggregation(newUserDN,adAppName,identityName));
	           				}
	           			}
           			}
              	}
            }
            return validationErrors;
  		]]>
  		</Source>
  	</Script>
  	<Transition to="Refresh Identity"/>
  </Step>
  <Step action="call:refreshIdentity" icon="Task" name="Refresh Identity" posX="1508" posY="317">
  	<Arg name="identityName" value="ref:identityName"/>
  	<Arg name="correlateEntitlements" value="true"/>
	<Arg name="provision" value="true"/>
    <Arg name="refreshRoleMetadata" value="true"/>
    <Arg name="refreshIdentityEntitlements" value="true"/>
	<Transition to="Add Error Message">
		<Script>
			<Source>
			<![CDATA[
				if(validationErrors!=null && validationErrors.size()>0){
					return true;
				}
				return false;
			]]>
			</Source>
		</Script>
	</Transition>
  	<Transition to="Stop"/>
  </Step>
  <Step action="call:addMessage" name="Add Error Message">
	<Arg name="message">
			<Script>
				<Source>
				<![CDATA[
					import sailpoint.tools.Util;
					return Util.listToCsv(validationErrors);
				]]>
				</Source>
			</Script>
	</Arg>
	<Arg name="type" value="Error"/>
	<Transition to="Stop"/>
  </Step>
  <Step catches="complete" icon="Catches" name="Check Status" posX="159" posY="26">
    <Script>
      <Source>
      <![CDATA[
  			import org.apache.log4j.Logger;
  			import sailpoint.api.ObjectUtil;
  			import sailpoint.object.Identity;
  			import sailpoint.tools.Message;
  			import sailpoint.tools.Util;
  			
			if(Util.nullSafeCaseInsensitiveEq(isSubmitted,"YES")){
				
	  			Logger log = Logger.getLogger("Workflow.CMH-LegalHold-Add");
					if (isDebugEnabled) {
	  			log.debug("Check Status step : Checking for errors");
					}
	  			
	  			
	  			if(wfcontext.getRootWorkflowCase().getMessages()!=null && wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error)!=null){
	  				List errorMessagesList = wfcontext.getRootWorkflowCase().getMessagesByType(Message.Type.Error);
	  				String errorMessage = Util.listToCsv(errorMessagesList);
	  				log.error("Check Status step : Errors Found : "+errorMessage);	
	  			}else{
	  				if(identityName!=null){
						Identity iden = acquireLockOnIdentity(identityName);
						if(iden!=null){					
							iden.setAttribute("identityRetention","YES");
							context.saveObject(iden);
							context.commitTransaction();
							ObjectUtil.unlockIdentity(context,iden);
						}
						
					}
	  			}

				String action = null;
	  			String source = "UI";
	  			String target = identityName;
	  			String attrName = "Employee ID";
	  			String attrVal = employeeId;
	  			Map strMap = new HashMap();
	  			if(Util.isEmpty(validationErrors)){
	  				action = "Legal-Hold-Success";
	  				strMap.put("setString1","Legal Hold Completed succesfully");
	  			}else{
	  				action = "Legal-Hold-Failure";
	  				strMap.put("setString1","Legal Hold failed due to errors");
	  				strMap.put("setString2",Util.listToCsv(validationErrors));
	  			}
	  			auditWrite(action,source,target,attrName,attrVal,strMap);
			}
    ]]>    
    </Source>
    </Script>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop" posX="1507" posY="93"/>
</Workflow>
