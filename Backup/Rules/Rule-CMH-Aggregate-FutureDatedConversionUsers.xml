<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="CMH-Aggregate-FutureDated-Conversion-Users-Rule">
<Description>The rule is run by the Future Dated conversion users task. This rule checks for the conversion case users who are not created before because of Future Start date, and if the current date is their start date then this will trigger the infor aggregation for those users.</Description>
  <Source><![CDATA[
    import org.apache.log4j.Logger;
  	import sailpoint.api.TaskManager;
  	import sailpoint.object.Attributes;
  	import sailpoint.object.Application;
  	import sailpoint.object.Custom; 
  	import sailpoint.tools.Util;
  	
  	public boolean runAggregation(String usersStr){
		log.debug("Entering runAggregation method");
  		boolean status = false;
  		String whereClause = "where Employee in ("+usersStr+")";
  		String sqlQuery = null;
  		Custom inforCustom = context.getObjectByName(Custom.class,"CMH-Custom-Object-Infor-Application");
  		if(inforCustom!=null){
	  		String inforAppName = inforCustom.getString("hrApplicationName");
	  		if(Util.isNotNullOrEmpty(inforAppName)){
	  			Application inforApp = context.getObjectByName(Application.class,inforAppName);
	  			if(inforApp!=null){
	  				sqlQuery = (String)inforApp.getAttributeValue("SQL");
					if(Util.isNotNullOrEmpty(sqlQuery)){
						if(sqlQuery.indexOf("where")>0){
							sqlQuery = sqlQuery.substring(0,sqlQuery.indexOf("where")).trim();
						}
						sqlQuery = sqlQuery + " " + whereClause;
			      		inforApp.setAttribute("SQL",sqlQuery);
						context.saveObject(inforApp);
						context.commitTransaction();
						
						try {  
							TaskManager tm = new TaskManager(context);  
							tm.run ("Infor HR Database Aggregation", new Attributes());
							status = true;  
						} catch (Exception e) {  
							log.error("CMH-Aggregate-FutureDated-Conversion-Users-Rule: Error occured while running infor aggregation");   
						}
					}
	  			}
	  		}
  		}
		log.debug("Exiting runAggregation method");
  		return status;
  	}
  	
  	public void updateCustomObject(String customObjName, List usersList){
		log.debug("Entering updateCustomObject method");
  		if(Util.isNotNullOrEmpty(customObjName)){
  			Custom customObj = context.getObjectByName(Custom.class,customObjName);
  			if(customObj!=null && !Util.isEmpty(usersList)){
  				for(String empId : usersList){
  					customObj.remove(empId);
  				}
  				context.saveObject(customObj);
  				context.commitTransaction();
  			}
  		}
		log.debug("Exiting updateCustomObject method");
  	}
  	Logger log = Logger.getLogger("Rule.CMH-Aggregate-FutureDated-Conversion-Users-Rule");
  	log.debug("Entering CMH-Aggregate-FutureDated-Conversion-Users-Rule");
  	Custom stCustomObj = context.getObjectByName(Custom.class,"CMH-DateFormat");
  	List usersList = null;
  	String CUSTOM_OBJ_NAME = "CMH-Custom-Future-Conversion-Users";
  	if(stCustomObj!=null){
		Custom customObj = context.getObjectByName(Custom.class,CUSTOM_OBJ_NAME);
		  	if(customObj!=null){
		  		Attributes attrs = customObj.getAttributes();
		  		if(attrs!=null){
			  		List empIds = attrs.getKeys();
			  		if(!Util.isEmpty(empIds)){
			  			usersList = new ArrayList();
			  			for(String empId : empIds){
						Date stDate = (Date)customObj.get(empId);
			  				Date currDate = new Date();
			  				if(!stDate.after(currDate)){
			  					usersList.add(empId);
			  				}
			  			}
			  		}
			  		if(!Util.isEmpty(usersList)){
			  			String usersStr = Util.listToCsv(usersList);
			  			if(Util.isNotNullOrEmpty(usersStr)){
			  				boolean status = runAggregation(usersStr);
			  				if(status){
							updateCustomObject(CUSTOM_OBJ_NAME,usersList);
						}	  				 
			  		}
		  		}
		  	}
  		}
  	}
  	log.debug("Exiting CMH-Aggregate-FutureDated-Conversion-Users-Rule");
  	return "Success";

  	
  ]]></Source>
</Rule>
